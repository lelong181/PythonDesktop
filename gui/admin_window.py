import tkinter as tk
from tkinter import ttk, messagebox
from services import user_service
from gui.exam_generator_window import ExamGeneratorWindow
from gui.question_creator_window import QuestionCreatorWindow
from gui.styles import ModernStyles


def find_exambank_app_and_logout(parent):
    """Helper function ƒë·ªÉ t√¨m ExamBankApp v√† g·ªçi show_login_after_logout"""
    current_parent = parent
    while hasattr(current_parent, 'parent'):
        current_parent = current_parent.parent
        if hasattr(current_parent, 'show_login_after_logout'):
            current_parent.show_login_after_logout()
            return True
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ g·ªçi tr·ª±c ti·∫øp
    if hasattr(parent, 'show_login_after_logout'):
        parent.show_login_after_logout()
        return True
    return False


class AdminWindow:
    def __init__(self, parent, auth_manager):
        self.parent = parent
        self.current_user = self.parent.current_user
        self.window = tk.Toplevel(self.parent.root)
        self.window.title("üë®‚Äçüíº Trang ch·ªß Qu·∫£n tr·ªã vi√™n - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("800x600")

        # Apply modern styling
        ModernStyles.apply_modern_style()
        self.window.configure(bg=ModernStyles.COLORS['light'])

        # Center window
        ModernStyles.center_window(self.window, 800, 600)

        # ·∫®n c·ª≠a s·ªï ƒëƒÉng nh·∫≠p
        self.parent.root.withdraw()
        self.setup_ui()

    def setup_ui(self):
        # Main container
        main_frame = ModernStyles.create_modern_frame(self.window)
        main_frame.pack(fill="both", expand=True, padx=40, pady=40)

        # Header section
        header_frame = ModernStyles.create_modern_frame(main_frame)
        header_frame.pack(fill="x", pady=(0, 30))

        # Avatar and admin info
        admin_info_frame = ModernStyles.create_modern_frame(header_frame)
        admin_info_frame.pack()

        # Avatar icon
        avatar_label = tk.Label(admin_info_frame, text="üë®‚Äçüíº",
                                font=("Segoe UI", 64),
                                fg=ModernStyles.COLORS['primary'],
                                bg=ModernStyles.COLORS['light'])
        avatar_label.pack(pady=(0, 15))

        # Admin name
        name_label = ModernStyles.create_title_label(admin_info_frame,
                                                     f"Xin ch√†o, {self.current_user['full_name']}")
        name_label.pack()

        # Subtitle
        subtitle_label = ModernStyles.create_subtitle_label(admin_info_frame,
                                                            "üéõÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã h·ªá th·ªëng")
        subtitle_label.pack(pady=(5, 0))

        # Function buttons section
        button_frame = ModernStyles.create_modern_frame(main_frame)
        button_frame.pack(expand=True, pady=(0, 30))

        # Main function buttons with modern styling
        buttons = [
            ("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng", "Th√™m, s·ª≠a, x√≥a ng∆∞·ªùi d√πng", self.open_user_management),
            ("üìä Qu·∫£n l√Ω ƒë·ªÅ thi", "T·∫°o v√† qu·∫£n l√Ω ƒë·ªÅ thi", self.open_exam_management),
            ("üìù Qu·∫£n l√Ω c√¢u h·ªèi", "Upload v√† qu·∫£n l√Ω c√¢u h·ªèi", self.open_question_management),
            ("üìö Qu·∫£n l√Ω m√¥n h·ªçc", "Th√™m, s·ª≠a, x√≥a m√¥n h·ªçc", self.open_subject_management)
        ]

        # Create button grid
        button_grid = ModernStyles.create_modern_frame(button_frame)
        button_grid.pack(expand=True)

        for i, (text, description, command) in enumerate(buttons):
            # Button container
            btn_container = ModernStyles.create_modern_frame(button_grid)
            btn_container.grid(row=i, column=0, pady=15, padx=20, sticky="ew")

            # Main button with modern styling
            btn = ModernStyles.create_info_button(btn_container, text, command)
            btn.pack(pady=(0, 8))

            # Description
            desc_label = ModernStyles.create_info_label(btn_container, description)
            desc_label.pack()

        # Footer section
        footer_frame = ModernStyles.create_modern_frame(main_frame)
        footer_frame.pack(side="bottom", fill="x", pady=(30, 0))

        # System info
        system_info = ModernStyles.create_info_label(footer_frame,
                                                     "üñ•Ô∏è H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        system_info.pack(side="left")

        # Logout button
        logout_btn = ModernStyles.create_danger_button(footer_frame,
                                                       "üö™ ƒêƒÉng xu·∫•t",
                                                       self.logout)
        logout_btn.pack(side="right")

    def open_user_management(self):
        # ·∫®n c·ª≠a s·ªï hi·ªán t·∫°i tr∆∞·ªõc khi m·ªü c·ª≠a s·ªï m·ªõi
        self.window.withdraw()
        UserManagementWindow(self)

    def open_exam_management(self):
        # ·∫®n c·ª≠a s·ªï hi·ªán t·∫°i tr∆∞·ªõc khi m·ªü c·ª≠a s·ªï m·ªõi
        self.window.withdraw()
        ExamGeneratorWindow(self, None)

    def open_question_management(self):
        # ·∫®n c·ª≠a s·ªï hi·ªán t·∫°i tr∆∞·ªõc khi m·ªü c·ª≠a s·ªï m·ªõi
        self.window.withdraw()
        QuestionCreatorWindow(self, None)

    def open_subject_management(self):
        # ·∫®n c·ª≠a s·ªï hi·ªán t·∫°i tr∆∞·ªõc khi m·ªü c·ª≠a s·ªï m·ªõi
        self.window.withdraw()
        SubjectManagementWindow(self)

    def back_to_admin(self):
        """Quay l·∫°i m√†n h√¨nh Admin ch√≠nh"""
        # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin v√† ƒë√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        if hasattr(self.parent, 'window'):
            self.parent.window.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin
        self.window.destroy()

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay v·ªÅ c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        self.window.destroy()
        # Ki·ªÉm tra parent type ƒë·ªÉ x·ª≠ l√Ω logout ƒë√∫ng c√°ch
        if hasattr(self.parent, 'show_login_after_logout'):
            # N·∫øu parent l√† ExamBankApp
            self.parent.show_login_after_logout()
        else:
            # N·∫øu parent l√† window kh√°c, t√¨m ExamBankApp
            current_parent = self.parent
            while hasattr(current_parent, 'parent'):
                current_parent = current_parent.parent
                if hasattr(current_parent, 'show_login_after_logout'):
                    current_parent.show_login_after_logout()
                    break
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")


# T√°ch ph·∫ßn qu·∫£n l√Ω ng∆∞·ªùi d√πng th√†nh class ri√™ng
class UserManagementWindow:
    def __init__(self, parent):
        self.parent = parent  # parent ph·∫£i c√≥ current_user
        self.window = tk.Toplevel(parent.window if hasattr(parent, 'window') else parent)
        self.window.title("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("1200x800")

        # Apply modern styling
        ModernStyles.apply_modern_style()
        self.window.configure(bg=ModernStyles.COLORS['light'])

        # Center window
        ModernStyles.center_window(self.window, 1200, 800)

        self.setup_ui()
        self.load_users()

        # Th√™m event handler ƒë·ªÉ ƒë·∫£m b·∫£o parent window ƒë∆∞·ª£c hi·ªÉn th·ªã khi ƒë√≥ng window n√†y
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán admin"""
        self.window.title("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("1200x800")

        # T·∫°o style cho user management
        style = ttk.Style()
        style.configure('UserMgmt.TFrame', background='#f8f9fa')
        style.configure('UserMgmtHeader.TLabel',
                        font=('Arial', 16, 'bold'),
                        foreground='#2c3e50',
                        background='#f8f9fa')
        # Style cho c√°c n√∫t kh√°c nhau
        style.configure('AddButton.TButton',
                        font=('Arial', 10, 'bold'),
                        padding=(15, 8),
                        background='#27ae60',
                        foreground='white',
                        borderwidth=2,
                        relief='raised')
        style.map('AddButton.TButton',
                  background=[('active', '#229954'), ('pressed', '#1e8449')],
                  foreground=[('active', 'white'), ('pressed', 'white')])

        style.configure('EditButton.TButton',
                        font=('Arial', 10, 'bold'),
                        padding=(15, 8),
                        background='#3498db',
                        foreground='white',
                        borderwidth=2,
                        relief='raised')
        style.map('EditButton.TButton',
                  background=[('active', '#2980b9'), ('pressed', '#21618c')],
                  foreground=[('active', 'white'), ('pressed', 'white')])

        style.configure('PasswordButton.TButton',
                        font=('Arial', 10, 'bold'),
                        padding=(15, 8),
                        background='#f39c12',
                        foreground='white',
                        borderwidth=2,
                        relief='raised')
        style.map('PasswordButton.TButton',
                  background=[('active', '#e67e22'), ('pressed', '#d35400')],
                  foreground=[('active', 'white'), ('pressed', 'white')])

        style.configure('DeleteButton.TButton',
                        font=('Arial', 10, 'bold'),
                        padding=(15, 8),
                        background='#e74c3c',
                        foreground='white',
                        borderwidth=2,
                        relief='raised')
        style.map('DeleteButton.TButton',
                  background=[('active', '#c0392b'), ('pressed', '#a93226')],
                  foreground=[('active', 'white'), ('pressed', 'white')])

        style.configure('RefreshButton.TButton',
                        font=('Arial', 10, 'bold'),
                        padding=(15, 8),
                        background='#9b59b6',
                        foreground='white',
                        borderwidth=2,
                        relief='raised')
        style.map('RefreshButton.TButton',
                  background=[('active', '#8e44ad'), ('pressed', '#7d3c98')],
                  foreground=[('active', 'white'), ('pressed', 'white')])

        # Frame ch√≠nh
        main_frame = ttk.Frame(self.window, padding="20", style='UserMgmt.TFrame')
        main_frame.grid(row=0, column=0, sticky="nsew")

        # C·∫•u h√¨nh grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)

        # Header v·ªõi gradient background
        header_frame = ttk.Frame(main_frame, style='UserMgmt.TFrame')
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 20))

        # Th√¥ng tin admin
        user_info = self.parent.current_user
        admin_info_frame = ttk.Frame(header_frame, style='UserMgmt.TFrame')
        admin_info_frame.pack(side=tk.LEFT)

        # Icon v√† t√™n admin
        admin_icon = ttk.Label(admin_info_frame, text="üë•",
                               font=("Arial", 24), background='#f8f9fa')
        admin_icon.pack(side=tk.LEFT, padx=(0, 10))

        admin_text_frame = ttk.Frame(admin_info_frame, style='UserMgmt.TFrame')
        admin_text_frame.pack(side=tk.LEFT)

        ttk.Label(admin_text_frame, text="Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
                  style="UserMgmtHeader.TLabel").pack(anchor="w")

        ttk.Label(admin_text_frame, text=f"Admin: {user_info['full_name']}",
                  font=("Arial", 12), foreground="#7f8c8d",
                  background='#f8f9fa').pack(anchor="w")

        # N√∫t quay l·∫°i v√† ƒëƒÉng xu·∫•t
        button_frame = ttk.Frame(header_frame, style='UserMgmt.TFrame')
        button_frame.pack(side=tk.RIGHT)

        ttk.Button(button_frame, text="‚¨ÖÔ∏è Quay l·∫°i",
                   command=self.back_to_admin, style="EditButton.TButton").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(button_frame, text="üö™ ƒêƒÉng xu·∫•t",
                   command=self.logout, style="DeleteButton.TButton").pack(side=tk.RIGHT)

        # Frame qu·∫£n l√Ω ng∆∞·ªùi d√πng v·ªõi style ƒë·∫πp
        users_frame = ttk.LabelFrame(main_frame, text="üìã Danh s√°ch ng∆∞·ªùi d√πng",
                                     padding="15", style='UserMgmt.TFrame')
        users_frame.grid(row=1, column=0, columnspan=2, sticky="nsew", pady=(0, 10))

        # Treeview cho danh s√°ch ng∆∞·ªùi d√πng v·ªõi style
        columns = ("ID", "T√™n ƒëƒÉng nh·∫≠p", "H·ªç t√™n", "Vai tr√≤", "Ng√†y t·∫°o")
        self.users_tree = ttk.Treeview(users_frame, columns=columns, show="headings", height=18)

        # C·∫•u h√¨nh style cho treeview
        style.configure("Treeview",
                        background="#ffffff",
                        foreground="#2c3e50",
                        rowheight=30,
                        fieldbackground="#ffffff")
        style.configure("Treeview.Heading",
                        font=('Arial', 10, 'bold'),
                        background="#3498db",
                        foreground="white")

        for col in columns:
            self.users_tree.heading(col, text=col)
            self.users_tree.column(col, width=180, anchor="center")

        self.users_tree.grid(row=0, column=0, sticky="nsew", padx=(0, 10))

        # Scrollbar v·ªõi style
        scrollbar = ttk.Scrollbar(users_frame, orient="vertical", command=self.users_tree.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.users_tree.configure(yscrollcommand=scrollbar.set)

        # Frame n√∫t ch·ª©c nƒÉng v·ªõi layout ƒë·∫πp
        button_frame = ttk.Frame(users_frame, style='UserMgmt.TFrame')
        button_frame.grid(row=1, column=0, columnspan=2, pady=15)

        # N√∫t b√™n tr√°i
        left_buttons = ttk.Frame(button_frame, style='UserMgmt.TFrame')
        left_buttons.pack(side=tk.LEFT)

        ttk.Button(left_buttons, text="‚ûï Th√™m ng∆∞·ªùi d√πng",
                   command=self.add_user, style="AddButton.TButton").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(left_buttons, text="‚úèÔ∏è S·ª≠a ng∆∞·ªùi d√πng",
                   command=self.edit_user, style="EditButton.TButton").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(left_buttons, text="üîê ƒê·ªïi m·∫≠t kh·∫©u",
                   command=self.change_password, style="PasswordButton.TButton").pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(left_buttons, text="üóëÔ∏è X√≥a ng∆∞·ªùi d√πng",
                   command=self.delete_user, style="DeleteButton.TButton").pack(side=tk.LEFT, padx=(0, 10))

        # Kh√¥ng c√≥ n√∫t refresh

        # Th·ªëng k√™ ng∆∞·ªùi d√πng
        stats_frame = ttk.Frame(users_frame, style='UserMgmt.TFrame')
        stats_frame.grid(row=2, column=0, columnspan=2, pady=(10, 0))

        stats_label = ttk.Label(stats_frame, text="üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: 0",
                                font=("Arial", 11), foreground="#27ae60",
                                background='#f8f9fa')
        stats_label.pack(side=tk.LEFT)
        self.stats_label = stats_label

        # C·∫•u h√¨nh grid
        users_frame.columnconfigure(0, weight=1)
        users_frame.rowconfigure(0, weight=1)

        # Bind events
        self.users_tree.bind("<Double-1>", lambda e: self.edit_user())

    def load_users(self):
        """T·∫£i danh s√°ch ng∆∞·ªùi d√πng"""
        try:
            users = user_service.get_users()

            # X√≥a d·ªØ li·ªáu c≈©
            for item in self.users_tree.get_children():
                self.users_tree.delete(item)

            # Th√™m d·ªØ li·ªáu m·ªõi
            for user in users:
                created_at = user.get('created_at')
                if isinstance(created_at, str):
                    try:
                        import datetime
                        created_date = datetime.datetime.fromisoformat(created_at).strftime('%d/%m/%Y %H:%M')
                    except Exception:
                        created_date = created_at
                else:
                    created_date = created_at.strftime('%d/%m/%Y %H:%M')

                role_display = {
                    'student': 'H·ªçc sinh',
                    'question_creator': 'Ng∆∞·ªùi l√†m ƒë·ªÅ',
                    'exam_generator': 'Ng∆∞·ªùi sinh ƒë·ªÅ',
                    'admin': 'Qu·∫£n tr·ªã vi√™n'
                }.get(user['role'], user['role'])

                self.users_tree.insert("", "end", values=(
                    user['id'],
                    user['username'],
                    user['full_name'],
                    role_display,
                    created_date
                ), tags=(user['id'],))

            # C·∫≠p nh·∫≠t th·ªëng k√™
            if hasattr(self, 'stats_label'):
                self.stats_label.config(text=f"üìä T·ªïng s·ªë ng∆∞·ªùi d√πng: {len(users)}")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng: {str(e)}")

    def get_selected_user_id(self):
        """L·∫•y ID ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªçn"""
        selection = self.users_tree.selection()
        if not selection:
            return None
        item = self.users_tree.item(selection[0])
        return item['tags'][0]

    def add_user(self):
        """Th√™m ng∆∞·ªùi d√πng m·ªõi"""
        dialog = tk.Toplevel(self.window)
        dialog.title("‚ûï Th√™m ng∆∞·ªùi d√πng m·ªõi")
        dialog.geometry("500x450")
        dialog.transient(self.window)
        dialog.grab_set()

        # CƒÉn gi·ªØa dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (450 // 2)
        dialog.geometry(f"500x450+{x}+{y}")

        # Style cho dialog
        style = ttk.Style()
        style.configure('Dialog.TFrame', background='#f8f9fa')
        style.configure('DialogHeader.TLabel',
                        font=('Arial', 16, 'bold'),
                        foreground='#2c3e50',
                        background='#f8f9fa')

        frame = ttk.Frame(dialog, padding="25", style='Dialog.TFrame')
        frame.pack(fill="both", expand=True)

        # Header v·ªõi icon
        header_frame = ttk.Frame(frame, style='Dialog.TFrame')
        header_frame.pack(fill="x", pady=(0, 25))

        icon_label = ttk.Label(header_frame, text="‚ûï",
                               font=("Arial", 24), background='#f8f9fa')
        icon_label.pack(side=tk.LEFT, padx=(0, 10))

        header_label = ttk.Label(header_frame, text="Th√™m ng∆∞·ªùi d√πng m·ªõi",
                                 style="DialogHeader.TLabel")
        header_label.pack(side=tk.LEFT)

        # Form fields v·ªõi layout ƒë·∫πp
        form_frame = ttk.Frame(frame, style='Dialog.TFrame')
        form_frame.pack(fill="x", pady=(0, 25))

        # T√™n ƒëƒÉng nh·∫≠p
        username_frame = ttk.Frame(form_frame, style='Dialog.TFrame')
        username_frame.pack(fill="x", pady=8)

        ttk.Label(username_frame, text="üë§ T√™n ƒëƒÉng nh·∫≠p:",
                  font=("Arial", 11, "bold"), background='#f8f9fa').pack(anchor="w")
        username_var = tk.StringVar()
        username_entry = ttk.Entry(username_frame, textvariable=username_var,
                                   width=50, font=("Arial", 11))
        username_entry.pack(fill="x", pady=(5, 0))

        # M·∫≠t kh·∫©u
        password_frame = ttk.Frame(form_frame, style='Dialog.TFrame')
        password_frame.pack(fill="x", pady=8)

        ttk.Label(password_frame, text="üîê M·∫≠t kh·∫©u:",
                  font=("Arial", 11, "bold"), background='#f8f9fa').pack(anchor="w")
        password_var = tk.StringVar()
        password_entry = ttk.Entry(password_frame, textvariable=password_var,
                                   show="*", width=50, font=("Arial", 11))
        password_entry.pack(fill="x", pady=(5, 0))

        # H·ªç t√™n
        fullname_frame = ttk.Frame(form_frame, style='Dialog.TFrame')
        fullname_frame.pack(fill="x", pady=8)

        ttk.Label(fullname_frame, text="üìù H·ªç t√™n:",
                  font=("Arial", 11, "bold"), background='#f8f9fa').pack(anchor="w")
        fullname_var = tk.StringVar()
        fullname_entry = ttk.Entry(fullname_frame, textvariable=fullname_var,
                                   width=50, font=("Arial", 11))
        fullname_entry.pack(fill="x", pady=(5, 0))

        # Vai tr√≤
        role_frame = ttk.Frame(form_frame, style='Dialog.TFrame')
        role_frame.pack(fill="x", pady=8)

        ttk.Label(role_frame, text="üé≠ Vai tr√≤:",
                  font=("Arial", 11, "bold"), background='#f8f9fa').pack(anchor="w")
        role_var = tk.StringVar(value="student")
        role_combo = ttk.Combobox(role_frame, textvariable=role_var,
                                  values=["student", "question_creator", "exam_generator", "admin"],
                                  state="readonly", width=47, font=("Arial", 11))
        role_combo.pack(fill="x", pady=(5, 0))

        def validate_form():
            username = username_var.get().strip()
            password = password_var.get().strip()
            fullname = fullname_var.get().strip()
            role = role_var.get()

            if not username:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!")
                username_entry.focus()
                return False

            if not password:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!")
                password_entry.focus()
                return False

            if len(password) < 6:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!")
                password_entry.focus()
                return False

            if not fullname:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p h·ªç t√™n!")
                fullname_entry.focus()
                return False

            if not role:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng ch·ªçn vai tr√≤!")
                role_combo.focus()
                return False

            return True

        def save():
            if not validate_form():
                return

            username = username_var.get().strip()
            password = password_var.get().strip()
            fullname = fullname_var.get().strip()
            role = role_var.get()

            # X√°c nh·∫≠n cu·ªëi c√πng
            result = messagebox.askyesno("X√°c nh·∫≠n",
                                         f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m ng∆∞·ªùi d√πng m·ªõi?\n\n"
                                         f"üìã Th√¥ng tin ng∆∞·ªùi d√πng:\n"
                                         f"‚Ä¢ T√™n ƒëƒÉng nh·∫≠p: {username}\n"
                                         f"‚Ä¢ H·ªç t√™n: {fullname}\n"
                                         f"‚Ä¢ Vai tr√≤: {role}")

            if not result:
                return

            try:
                from services.api_client import clear_cache

                # X√≥a cache tr∆∞·ªõc khi t·∫°o user m·ªõi
                clear_cache()

                user_service.create_user(username, password, fullname, role)
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ th√™m ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng!\n\n"
                                    f"üìã Th√¥ng tin:\n"
                                    f"‚Ä¢ T√™n ƒëƒÉng nh·∫≠p: {username}\n"
                                    f"‚Ä¢ H·ªç t√™n: {fullname}\n"
                                    f"‚Ä¢ Vai tr√≤: {role}")
                dialog.destroy()

                # X√≥a cache v√† load l·∫°i danh s√°ch ngay l·∫≠p t·ª©c
                clear_cache()
                self.window.after(100, self.load_users)
            except Exception as e:
                messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ th√™m ng∆∞·ªùi d√πng:\n{str(e)}")

        def cancel():
            dialog.destroy()

        # Button frame
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill="x", pady=(10, 0))

        # Buttons
        ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚úÖ X√°c nh·∫≠n th√™m ng∆∞·ªùi d√πng", command=save,
                   style='Accent.TButton', width=25).pack(side=tk.RIGHT)

        # Focus v√†o username entry
        username_entry.focus()

        # Bind Enter key
        dialog.bind('<Return>', lambda e: save())
        dialog.bind('<Escape>', lambda e: cancel())

    def edit_user(self):
        """S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng"""
        user_id = self.get_selected_user_id()
        if not user_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ s·ª≠a!")
            return

        try:
            user = user_service.get_user(user_id)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {str(e)}")
            return

        dialog = tk.Toplevel(self.window)
        dialog.title("S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng")
        dialog.geometry("500x400")
        dialog.transient(self.window)
        dialog.grab_set()
        dialog.resizable(False, False)  # Kh√¥ng cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc

        # CƒÉn gi·ªØa dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (dialog.winfo_screenheight() // 2) - (400 // 2)
        dialog.geometry(f"500x400+{x}+{y}")

        # Main container frame
        main_frame = ttk.Frame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Form frame
        frame = ttk.Frame(main_frame)
        frame.pack(fill="both", expand=True)

        # Form fields v·ªõi layout c·∫£i thi·ªán
        # C·∫•u h√¨nh grid
        frame.columnconfigure(1, weight=1)

        ttk.Label(frame, text="T√™n ƒëƒÉng nh·∫≠p:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky="w", pady=8,
                                                                                 padx=(0, 10))
        username_var = tk.StringVar(value=user['username'])
        username_entry = ttk.Entry(frame, textvariable=username_var, width=35, font=("Arial", 10))
        username_entry.grid(row=0, column=1, sticky="ew", pady=8)

        ttk.Label(frame, text="H·ªç t√™n:", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky="w", pady=8,
                                                                          padx=(0, 10))
        fullname_var = tk.StringVar(value=user['full_name'])
        fullname_entry = ttk.Entry(frame, textvariable=fullname_var, width=35, font=("Arial", 10))
        fullname_entry.grid(row=1, column=1, sticky="ew", pady=8)

        ttk.Label(frame, text="Vai tr√≤:", font=("Arial", 10, "bold")).grid(row=2, column=0, sticky="w", pady=8,
                                                                           padx=(0, 10))
        role_var = tk.StringVar(value=user['role'])
        role_combo = ttk.Combobox(frame, textvariable=role_var,
                                  values=["student", "question_creator", "exam_generator", "admin"],
                                  state="readonly", width=32, font=("Arial", 10))
        role_combo.grid(row=2, column=1, sticky="ew", pady=8)

        def validate_form():
            username = username_var.get().strip()
            fullname = fullname_var.get().strip()
            role = role_var.get()

            if not username:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!")
                return False

            if not fullname:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p h·ªç t√™n!")
                return False

            if not role:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng ch·ªçn vai tr√≤!")
                return False

            return True

        def save():
            if not validate_form():
                return

            username = username_var.get().strip()
            fullname = fullname_var.get().strip()
            role = role_var.get()

            # X√°c nh·∫≠n cu·ªëi c√πng
            result = messagebox.askyesno("X√°c nh·∫≠n",
                                         f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng?\n\n"
                                         f"üìã Th√¥ng tin m·ªõi:\n"
                                         f"‚Ä¢ T√™n ƒëƒÉng nh·∫≠p: {username}\n"
                                         f"‚Ä¢ H·ªç t√™n: {fullname}\n"
                                         f"‚Ä¢ Vai tr√≤: {role}")

            if not result:
                return

            try:
                from services.api_client import clear_cache

                # X√≥a cache tr∆∞·ªõc khi c·∫≠p nh·∫≠t user
                clear_cache()

                user_service.update_user(user_id, {
                    "username": username,
                    "full_name": fullname,
                    "role": role
                })
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!\n\n"
                                    f"üìã Th√¥ng tin m·ªõi:\n"
                                    f"‚Ä¢ T√™n ƒëƒÉng nh·∫≠p: {username}\n"
                                    f"‚Ä¢ H·ªç t√™n: {fullname}\n"
                                    f"‚Ä¢ Vai tr√≤: {role}")
                dialog.destroy()

                # X√≥a cache v√† load l·∫°i danh s√°ch ngay l·∫≠p t·ª©c
                clear_cache()
                self.window.after(100, self.load_users)
            except Exception as e:
                messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t:\n{str(e)}")

        def cancel():
            dialog.destroy()

        # Th√™m separator ƒë·ªÉ ph√¢n t√°ch
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill='x', pady=(20, 0))

        # Button frame ri√™ng bi·ªát
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(15, 0))

        # Buttons v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n v√† r√µ r√†ng
        cancel_btn = ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel,
                                width=20, style='Danger.TButton')
        cancel_btn.pack(side=tk.LEFT, padx=(0, 15))

        save_btn = ttk.Button(button_frame, text="‚úÖ L∆∞u thay ƒë·ªïi", command=save,
                              width=22, style='Accent.TButton')
        save_btn.pack(side=tk.RIGHT)

        # Focus v√†o entry ƒë·∫ßu ti√™n
        username_entry.focus()

    def change_password(self):
        """ƒê·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng"""
        user_id = self.get_selected_user_id()
        if not user_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u!")
            return

        try:
            user = user_service.get_user(user_id)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {str(e)}")
            return

        dialog = tk.Toplevel(self.window)
        dialog.title(f"ƒê·ªïi m·∫≠t kh·∫©u - {user['username']}")
        dialog.geometry("550x400")
        dialog.transient(self.window)
        dialog.grab_set()
        dialog.resizable(False, False)  # Kh√¥ng cho ph√©p thay ƒë·ªïi k√≠ch th∆∞·ªõc

        # CƒÉn gi·ªØa dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (550 // 2)
        y = (dialog.winfo_screenheight() // 2) - (400 // 2)
        dialog.geometry(f"550x400+{x}+{y}")

        # Main container frame
        main_frame = ttk.Frame(dialog)
        main_frame.pack(fill="both", expand=True, padx=25, pady=25)

        frame = ttk.Frame(main_frame)
        frame.pack(fill="both", expand=True)

        # Header
        header_label = ttk.Label(frame, text=f"üîê ƒê·ªïi m·∫≠t kh·∫©u", font=("Arial", 16, "bold"))
        header_label.pack(pady=(0, 10))

        user_label = ttk.Label(frame, text=f"Ng∆∞·ªùi d√πng: {user['full_name']} ({user['username']})",
                               font=("Arial", 12))
        user_label.pack(pady=(0, 30))

        # Form fields
        form_frame = ttk.Frame(frame)
        form_frame.pack(fill="x", pady=(0, 30))

        ttk.Label(form_frame, text="M·∫≠t kh·∫©u m·ªõi:", font=("Arial", 12, "bold")).pack(anchor="w")
        password_var = tk.StringVar()
        password_entry = ttk.Entry(form_frame, textvariable=password_var, show="*", width=50, font=("Arial", 12))
        password_entry.pack(pady=(8, 20), fill="x")

        ttk.Label(form_frame, text="X√°c nh·∫≠n m·∫≠t kh·∫©u:", font=("Arial", 12, "bold")).pack(anchor="w")
        confirm_var = tk.StringVar()
        confirm_entry = ttk.Entry(form_frame, textvariable=confirm_var, show="*", width=50, font=("Arial", 12))
        confirm_entry.pack(pady=(8, 20), fill="x")

        # Validation function
        def validate_password():
            password = password_var.get().strip()
            confirm = confirm_var.get().strip()

            if not password:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi!")
                password_entry.focus()
                return False

            if len(password) < 6:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!")
                password_entry.focus()
                return False

            if password != confirm:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
                confirm_entry.focus()
                return False

            return True

        def save():
            if not validate_password():
                return

            password = password_var.get().strip()

            # X√°c nh·∫≠n cu·ªëi c√πng
            result = messagebox.askyesno("X√°c nh·∫≠n",
                                         f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng:\n"
                                         f"‚Ä¢ {user['full_name']}\n"
                                         f"‚Ä¢ {user['username']}\n\n"
                                         f"‚ö†Ô∏è M·∫≠t kh·∫©u m·ªõi s·∫Ω c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c!")

            if not result:
                return

            try:
                user_service.change_password(user_id, password)
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng cho ng∆∞·ªùi d√πng:\n"
                                    f"‚Ä¢ {user['full_name']}\n"
                                    f"‚Ä¢ {user['username']}")
                dialog.destroy()
            except Exception as e:
                messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u:\n{str(e)}")

        def cancel():
            dialog.destroy()

        # Th√™m separator ƒë·ªÉ ph√¢n t√°ch
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill='x', pady=(20, 0))

        # Button frame ri√™ng bi·ªát
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(15, 0))

        # Buttons v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n v√† r√µ r√†ng
        cancel_btn = ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel,
                                width=20, style='Danger.TButton')
        cancel_btn.pack(side=tk.LEFT, padx=(0, 15))

        save_btn = ttk.Button(button_frame, text="‚úÖ X√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u", command=save,
                              width=28, style='Accent.TButton')
        save_btn.pack(side=tk.RIGHT)

        # Focus v√†o password entry
        password_entry.focus()

        # Bind Enter key
        dialog.bind('<Return>', lambda e: save())
        dialog.bind('<Escape>', lambda e: cancel())

    def delete_user(self):
        """X√≥a ng∆∞·ªùi d√πng"""
        user_id = self.get_selected_user_id()
        if not user_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a!")
            return

        try:
            user = user_service.get_user(user_id)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng: {str(e)}")
            return

        result = messagebox.askyesno("X√°c nh·∫≠n",
                                     f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ng∆∞·ªùi d√πng {user['full_name']}?\n"
                                     f"T√™n ƒëƒÉng nh·∫≠p: {user['username']}")

        if result:
            try:
                from services.api_client import clear_cache

                # X√≥a cache tr∆∞·ªõc khi x√≥a user
                clear_cache()

                user_service.delete_user(user_id)
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a ng∆∞·ªùi d√πng!")

                # X√≥a cache v√† load l·∫°i danh s√°ch ngay l·∫≠p t·ª©c
                clear_cache()
                self.window.after(100, self.load_users)
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng: {str(e)}")

    def back_to_admin(self):
        """Quay l·∫°i m√†n h√¨nh Admin ch√≠nh"""
        # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin v√† ƒë√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        if hasattr(self.parent, 'window'):
            self.parent.window.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin
        self.window.destroy()

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay v·ªÅ c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        self.window.destroy()
        # Ki·ªÉm tra parent type ƒë·ªÉ x·ª≠ l√Ω logout ƒë√∫ng c√°ch
        if hasattr(self.parent, 'show_login_after_logout'):
            # N·∫øu parent l√† ExamBankApp
            self.parent.show_login_after_logout()
        else:
            # N·∫øu parent l√† window kh√°c, t√¨m ExamBankApp
            current_parent = self.parent
            while hasattr(current_parent, 'parent'):
                current_parent = current_parent.parent
                if hasattr(current_parent, 'show_login_after_logout'):
                    current_parent.show_login_after_logout()
                    break
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng window"""
        self.back_to_admin()


# Qu·∫£n l√Ω m√¥n h·ªçc
class SubjectManagementWindow:
    def __init__(self, parent):
        self.parent = parent
        self.window = tk.Toplevel(parent.window if hasattr(parent, 'window') else parent)
        self.window.title("Qu·∫£n l√Ω m√¥n h·ªçc")
        self.window.geometry("800x600")
        self.setup_ui()
        self.load_subjects()

        # Th√™m event handler ƒë·ªÉ ƒë·∫£m b·∫£o parent window ƒë∆∞·ª£c hi·ªÉn th·ªã khi ƒë√≥ng window n√†y
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán qu·∫£n l√Ω m√¥n h·ªçc"""
        self.window.title("Qu·∫£n l√Ω m√¥n h·ªçc - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("800x600")

        # Frame ch√≠nh
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.grid(row=0, column=0, sticky="nsew")

        # C·∫•u h√¨nh grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)

        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))

        user_info = self.parent.current_user
        ttk.Label(header_frame, text=f"üìö Qu·∫£n l√Ω m√¥n h·ªçc - Admin: {user_info['full_name']}",
                  font=("Arial", 12, "bold")).pack(side=tk.LEFT)

        # N√∫t quay l·∫°i v√† ƒëƒÉng xu·∫•t
        button_frame = ttk.Frame(header_frame)
        button_frame.pack(side=tk.RIGHT)

        ttk.Button(button_frame, text="‚¨ÖÔ∏è Quay l·∫°i",
                   command=self.back_to_admin).pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(button_frame, text="ƒêƒÉng xu·∫•t",
                   command=self.logout).pack(side=tk.RIGHT)

        # Frame qu·∫£n l√Ω m√¥n h·ªçc
        subjects_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch m√¥n h·ªçc", padding="10")
        subjects_frame.grid(row=1, column=0, columnspan=2, sticky="nsew", pady=(0, 10))

        # Treeview cho danh s√°ch m√¥n h·ªçc v·ªõi c·ªôt thao t√°c
        columns = ("ID", "T√™n m√¥n h·ªçc", "M√£ m√¥n h·ªçc", "M√¥ t·∫£", "S·ªë c√¢u h·ªèi", "Ng√†y t·∫°o", "Thao t√°c")
        self.subjects_tree = ttk.Treeview(subjects_frame, columns=columns, show="headings", height=15)

        # C·∫•u h√¨nh c·ªôt
        column_widths = {
            "ID": 60,
            "T√™n m√¥n h·ªçc": 150,
            "M√£ m√¥n h·ªçc": 100,
            "M√¥ t·∫£": 180,
            "S·ªë c√¢u h·ªèi": 80,
            "Ng√†y t·∫°o": 100,
            "Thao t√°c": 100
        }

        for col in columns:
            self.subjects_tree.heading(col, text=col)
            self.subjects_tree.column(col, width=column_widths[col], minwidth=50)

        # ƒê·∫£m b·∫£o c·ªôt "Thao t√°c" lu√¥n hi·ªÉn th·ªã v√† c√≥ th·ªÉ nh√¨n th·∫•y
        self.subjects_tree.column("Thao t√°c", stretch=False, anchor="center")

        self.subjects_tree.grid(row=0, column=0, sticky="nsew")

        # Scrollbar
        scrollbar = ttk.Scrollbar(subjects_frame, orient="vertical", command=self.subjects_tree.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.subjects_tree.configure(yscrollcommand=scrollbar.set)

        # Frame n√∫t ch·ª©c nƒÉng ƒë∆°n gi·∫£n
        button_frame = ttk.Frame(subjects_frame)
        button_frame.grid(row=1, column=0, columnspan=2, pady=10)

        # N√∫t th√™m m√¥n h·ªçc m·ªõi
        ttk.Button(button_frame, text="‚ûï Th√™m m√¥n h·ªçc m·ªõi",
                   command=self.add_subject,
                   style='AdminButton.TButton').pack(side=tk.LEFT, padx=(0, 10))

        # N√∫t s·ª≠a m√¥n h·ªçc
        ttk.Button(button_frame, text="‚úèÔ∏è S·ª≠a m√¥n h·ªçc",
                   command=self.edit_subject,
                   style='AdminButton.TButton').pack(side=tk.LEFT, padx=(0, 10))

        # C·∫•u h√¨nh grid
        subjects_frame.columnconfigure(0, weight=1)
        subjects_frame.rowconfigure(0, weight=1)

        # Bind events
        self.subjects_tree.bind("<Double-1>", lambda e: self.edit_subject())
        self.subjects_tree.bind("<Button-1>", self.on_tree_click)

    # Kh√¥ng c·∫ßn h√†m manage_subjects v√† execute_and_close n·ªØa

    def load_subjects(self):
        """T·∫£i danh s√°ch m√¥n h·ªçc"""
        try:
            from services import subject_service, question_service
            from services.api_client import clear_cache

            # X√≥a cache tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
            clear_cache()

            # X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc
            for item in self.subjects_tree.get_children():
                self.subjects_tree.delete(item)

            # T·∫£i d·ªØ li·ªáu m·ªõi
            subjects = subject_service.get_subjects()

            # Th√™m d·ªØ li·ªáu m·ªõi
            for subject in subjects:
                try:
                    # ƒê·∫øm s·ªë c√¢u h·ªèi trong m√¥n h·ªçc
                    questions = question_service.get_questions(subject['id'])
                    question_count = len(questions)
                except:
                    question_count = 0

                created_at = subject.get('created_at', 'N/A')
                if isinstance(created_at, str) and created_at != 'N/A':
                    try:
                        import datetime
                        created_date = datetime.datetime.fromisoformat(created_at.replace('Z', '+00:00')).strftime(
                            '%d/%m/%Y')
                    except:
                        created_date = created_at
                else:
                    created_date = 'N/A'

                self.subjects_tree.insert("", "end", values=(
                    subject['id'],
                    subject['name'],
                    subject.get('code', ''),
                    subject.get('description', ''),
                    question_count,
                    created_date,
                    "üóëÔ∏è X√≥a"  # N√∫t x√≥a trong c·ªôt thao t√°c
                ), tags=(subject['id'],))

            # C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
            self.subjects_tree.update()
            self.window.update_idletasks()  # ƒê·∫£m b·∫£o UI ƒë∆∞·ª£c c·∫≠p nh·∫≠t

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc: {str(e)}")

    def on_tree_click(self, event):
        """X·ª≠ l√Ω click v√†o treeview"""
        region = self.subjects_tree.identify("region", event.x, event.y)
        if region == "cell":
            column = self.subjects_tree.identify_column(event.x)
            if column == "#7":  # C·ªôt "Thao t√°c"
                item = self.subjects_tree.identify_row(event.y)
                if item:
                    subject_id = self.subjects_tree.item(item, "tags")[0]
                    self.delete_subject_by_id(subject_id)

    def delete_subject_by_id(self, subject_id):
        """X√≥a m√¥n h·ªçc theo ID (t·ª´ click v√†o c·ªôt thao t√°c)"""
        try:
            from services import subject_service
            from services.api_client import clear_cache

            # X√≥a cache tr∆∞·ªõc khi ki·ªÉm tra
            clear_cache()

            # Ki·ªÉm tra m√¥n h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
            try:
                subject = subject_service.get_subject(subject_id)
            except Exception:
                messagebox.showerror("‚ùå L·ªói", f"M√¥n h·ªçc kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!")
                self.load_subjects()  # L√†m m·ªõi danh s√°ch
                return

            # L·∫•y th√¥ng tin chi ti·∫øt t·ª´ subject
            subject_name = subject.get('name', 'N/A')
            subject_code = subject.get('code', 'N/A')

            result = messagebox.askyesno(
                "üóëÔ∏è X√°c nh·∫≠n x√≥a m√¥n h·ªçc",
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√¥n h·ªçc n√†y?\n\n"
                f"üìù Th√¥ng tin m√¥n h·ªçc:\n"
                f"‚Ä¢ ID: {subject_id}\n"
                f"‚Ä¢ T√™n m√¥n h·ªçc: {subject_name}\n"
                f"‚Ä¢ M√£ m√¥n h·ªçc: {subject_code}\n\n"
                f"‚ö†Ô∏è C·∫£nh b√°o: Vi·ªác x√≥a m√¥n h·ªçc s·∫Ω x√≥a t·∫•t c·∫£ c√¢u h·ªèi v√† ƒë·ªÅ thi li√™n quan!\n\n"
                f"‚ö†Ô∏è L∆∞u √Ω: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
            )

            if result:
                try:
                    # X√≥a cache tr∆∞·ªõc khi x√≥a
                    clear_cache()
                    subject_service.delete_subject(subject_id)
                    messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ x√≥a m√¥n h·ªçc {subject_name} th√†nh c√¥ng!")

                    # L√†m m·ªõi danh s√°ch ngay l·∫≠p t·ª©c
                    self.load_subjects()
                except Exception as e:
                    messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ x√≥a m√¥n h·ªçc: {str(e)}")
                    # L√†m m·ªõi danh s√°ch n·∫øu c√≥ l·ªói
                    self.load_subjects()
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ x√≥a m√¥n h·ªçc: {str(e)}")
            # L√†m m·ªõi danh s√°ch
            self.load_subjects()

    def get_selected_subject_id(self):
        """L·∫•y ID c·ªßa m√¥n h·ªçc ƒë∆∞·ª£c ch·ªçn"""
        selection = self.subjects_tree.selection()
        if not selection:
            return None
        return self.subjects_tree.item(selection[0], "tags")[0]

    def add_subject(self):
        """Th√™m m√¥n h·ªçc m·ªõi"""
        dialog = tk.Toplevel(self.window)
        dialog.title("Th√™m m√¥n h·ªçc m·ªõi")
        dialog.geometry("400x350")
        dialog.transient(self.window)
        dialog.grab_set()

        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill="both", expand=True)

        # Form fields
        ttk.Label(frame, text="T√™n m√¥n h·ªçc:", font=("Arial", 10, "bold")).pack(anchor="w")
        name_var = tk.StringVar()
        ttk.Entry(frame, textvariable=name_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        ttk.Label(frame, text="M√£ m√¥n h·ªçc:", font=("Arial", 10, "bold")).pack(anchor="w")
        code_var = tk.StringVar()
        ttk.Entry(frame, textvariable=code_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        ttk.Label(frame, text="M√¥ t·∫£:", font=("Arial", 10, "bold")).pack(anchor="w")
        desc_var = tk.StringVar()
        ttk.Entry(frame, textvariable=desc_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        def validate_form():
            name = name_var.get().strip()
            code = code_var.get().strip()
            if not name:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n m√¥n h·ªçc!")
                return False
            if not code:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ m√¥n h·ªçc!")
                return False
            return True

        def save():
            if not validate_form():
                return

            name = name_var.get().strip()
            code = code_var.get().strip()
            description = desc_var.get().strip()

            # X√°c nh·∫≠n cu·ªëi c√πng
            result = messagebox.askyesno("X√°c nh·∫≠n",
                                         f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën th√™m m√¥n h·ªçc m·ªõi?\n\n"
                                         f"üìã Th√¥ng tin m√¥n h·ªçc:\n"
                                         f"‚Ä¢ T√™n m√¥n h·ªçc: {name}\n"
                                         f"‚Ä¢ M√£ m√¥n h·ªçc: {code}\n"
                                         f"‚Ä¢ M√¥ t·∫£: {description}")

            if not result:
                return

            try:
                from services import subject_service
                subject_service.create_subject({
                    "name": name,
                    "code": code,
                    "description": description
                })
                # X√≥a cache v√† l√†m m·ªõi danh s√°ch ngay l·∫≠p t·ª©c
                from services.api_client import clear_cache
                clear_cache()

                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ th√™m m√¥n h·ªçc th√†nh c√¥ng!\n\n"
                                    f"üìã Th√¥ng tin m√¥n h·ªçc:\n"
                                    f"‚Ä¢ T√™n m√¥n h·ªçc: {name}\n"
                                    f"‚Ä¢ M√£ m√¥n h·ªçc: {code}\n"
                                    f"‚Ä¢ M√¥ t·∫£: {description}")
                dialog.destroy()

                # L√†m m·ªõi danh s√°ch ngay l·∫≠p t·ª©c
                self.load_subjects()
            except Exception as e:
                messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ th√™m m√¥n h·ªçc:\n{str(e)}")

        def cancel():
            dialog.destroy()

        # Buttons
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill="x", pady=(20, 0))

        ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚úÖ Th√™m m√¥n h·ªçc", command=save,
                   style='Accent.TButton', width=20).pack(side=tk.RIGHT)

    def edit_subject(self):
        """S·ª≠a th√¥ng tin m√¥n h·ªçc"""
        subject_id = self.get_selected_subject_id()
        if not subject_id:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ s·ª≠a!")
            return

        try:
            from services import subject_service
            subject = subject_service.get_subject(subject_id)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√¥n h·ªçc: {str(e)}")
            return

        dialog = tk.Toplevel(self.window)
        dialog.title("S·ª≠a th√¥ng tin m√¥n h·ªçc")
        dialog.geometry("400x350")
        dialog.transient(self.window)
        dialog.grab_set()

        frame = ttk.Frame(dialog, padding="20")
        frame.pack(fill="both", expand=True)

        # Form fields
        ttk.Label(frame, text="T√™n m√¥n h·ªçc:", font=("Arial", 10, "bold")).pack(anchor="w")
        name_var = tk.StringVar(value=subject['name'])
        ttk.Entry(frame, textvariable=name_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        ttk.Label(frame, text="M√£ m√¥n h·ªçc:", font=("Arial", 10, "bold")).pack(anchor="w")
        code_var = tk.StringVar(value=subject.get('code', ''))
        ttk.Entry(frame, textvariable=code_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        ttk.Label(frame, text="M√¥ t·∫£:", font=("Arial", 10, "bold")).pack(anchor="w")
        desc_var = tk.StringVar(value=subject.get('description', ''))
        ttk.Entry(frame, textvariable=desc_var, width=40, font=("Arial", 10)).pack(pady=(5, 15), fill="x")

        def validate_form():
            name = name_var.get().strip()
            code = code_var.get().strip()
            if not name:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n m√¥n h·ªçc!")
                return False
            if not code:
                messagebox.showwarning("C·∫£nh b√°o", "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ m√¥n h·ªçc!")
                return False
            return True

        def save():
            if not validate_form():
                return

            name = name_var.get().strip()
            code = code_var.get().strip()
            description = desc_var.get().strip()

            # X√°c nh·∫≠n cu·ªëi c√πng
            result = messagebox.askyesno("X√°c nh·∫≠n",
                                         f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c·∫≠p nh·∫≠t th√¥ng tin m√¥n h·ªçc?\n\n"
                                         f"üìã Th√¥ng tin m·ªõi:\n"
                                         f"‚Ä¢ T√™n m√¥n h·ªçc: {name}\n"
                                         f"‚Ä¢ M√£ m√¥n h·ªçc: {code}\n"
                                         f"‚Ä¢ M√¥ t·∫£: {description}")

            if not result:
                return

            try:
                from services import subject_service
                subject_service.update_subject(subject_id, {
                    "name": name,
                    "code": code,
                    "description": description
                })
                # X√≥a cache v√† l√†m m·ªõi danh s√°ch ngay l·∫≠p t·ª©c
                from services.api_client import clear_cache
                clear_cache()

                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin m√¥n h·ªçc th√†nh c√¥ng!\n\n"
                                    f"üìã Th√¥ng tin m·ªõi:\n"
                                    f"‚Ä¢ T√™n m√¥n h·ªçc: {name}\n"
                                    f"‚Ä¢ M√£ m√¥n h·ªçc: {code}\n"
                                    f"‚Ä¢ M√¥ t·∫£: {description}")
                dialog.destroy()

                # L√†m m·ªõi danh s√°ch ngay l·∫≠p t·ª©c
                self.load_subjects()
            except Exception as e:
                messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√¥n h·ªçc:\n{str(e)}")

        def cancel():
            dialog.destroy()

        # Buttons
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill="x", pady=(20, 0))

        ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚úÖ C·∫≠p nh·∫≠t", command=save,
                   style='Accent.TButton', width=20).pack(side=tk.RIGHT)

    def back_to_admin(self):
        """Quay l·∫°i m√†n h√¨nh Admin ch√≠nh"""
        # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin v√† ƒë√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        if hasattr(self.parent, 'window'):
            self.parent.window.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin
        self.window.destroy()

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay v·ªÅ c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        self.window.destroy()
        # Ki·ªÉm tra parent type ƒë·ªÉ x·ª≠ l√Ω logout ƒë√∫ng c√°ch
        if hasattr(self.parent, 'show_login_after_logout'):
            # N·∫øu parent l√† ExamBankApp
            self.parent.show_login_after_logout()
        else:
            # N·∫øu parent l√† window kh√°c, t√¨m ExamBankApp
            current_parent = self.parent
            while hasattr(current_parent, 'parent'):
                current_parent = current_parent.parent
                if hasattr(current_parent, 'show_login_after_logout'):
                    current_parent.show_login_after_logout()
                    break
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng window"""
        self.back_to_admin()