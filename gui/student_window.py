import tkinter as tk
from tkinter import ttk, messagebox
import datetime
from services import exam_service, question_service, answer_service, student_exam_service
from gui.styles import ModernStyles


class StudentWindow:
    def __init__(self, parent, auth_manager):
        self.parent = parent
        self.current_user = self.parent.current_user

        # X√°c ƒë·ªãnh parent window ƒë√∫ng c√°ch
        if hasattr(parent, 'root'):
            # N·∫øu parent c√≥ thu·ªôc t√≠nh root (ExamBankApp)
            parent_window = parent.root
        elif hasattr(parent, 'window'):
            # N·∫øu parent c√≥ thu·ªôc t√≠nh window (AdminWindow, etc.)
            parent_window = parent.window
        else:
            # Fallback
            parent_window = parent

        self.window = tk.Toplevel(parent_window)
        self.window.title("üë®‚Äçüéì Giao di·ªán h·ªçc sinh - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("1000x700")

        # Apply modern styling
        ModernStyles.apply_modern_style()
        self.window.configure(bg=ModernStyles.COLORS['light'])

        # Center window
        ModernStyles.center_window(self.window, 1000, 700)

        # NgƒÉn ƒë√≥ng c·ª≠a s·ªï khi ƒëang l√†m b√†i
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

        self.setup_ui()
        self.load_available_exams()

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán h·ªçc sinh"""
        self.window.title("üë®‚Äçüéì H·ªçc sinh - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("1000x700")

        # T·∫°o style cho student window
        style = ttk.Style()
        style.configure('Student.TFrame', background='#f8f9fa')
        style.configure('StudentHeader.TLabel',
                        font=('Arial', 16, 'bold'),
                        foreground='#2c3e50',
                        background='#f8f9fa')
        style.configure('Timer.TLabel',
                        font=('Arial', 14, 'bold'),
                        foreground='#e74c3c',
                        background='#f8f9fa')

        # Frame ch√≠nh
        self.main_frame = ttk.Frame(self.window, padding="20", style='Student.TFrame')
        self.main_frame.grid(row=0, column=0, sticky="nsew")

        # C·∫•u h√¨nh grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        self.main_frame.columnconfigure(1, weight=1)
        self.main_frame.rowconfigure(1, weight=1)

        # Header v·ªõi th√¥ng tin h·ªçc sinh
        header_frame = ttk.Frame(self.main_frame, style='Student.TFrame')
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 20))

        # Th√¥ng tin h·ªçc sinh
        user_info = self.current_user
        student_info_frame = ttk.Frame(header_frame, style='Student.TFrame')
        student_info_frame.pack(side=tk.LEFT)

        # Icon v√† t√™n h·ªçc sinh
        student_icon = ttk.Label(student_info_frame, text="üë®‚Äçüéì",
                                 font=("Arial", 24), background='#f8f9fa')
        student_icon.pack(side=tk.LEFT, padx=(0, 10))

        student_text_frame = ttk.Frame(student_info_frame, style='Student.TFrame')
        student_text_frame.pack(side=tk.LEFT)

        ttk.Label(student_text_frame, text="Giao di·ªán h·ªçc sinh",
                  style="StudentHeader.TLabel").pack(anchor="w")

        ttk.Label(student_text_frame, text=f"H·ªçc sinh: {user_info['full_name']}",
                  font=("Arial", 12), foreground="#7f8c8d",
                  background='#f8f9fa').pack(anchor="w")

        # N√∫t ƒëƒÉng xu·∫•t
        logout_frame = ttk.Frame(header_frame, style='Student.TFrame')
        logout_frame.pack(side=tk.RIGHT)

        ttk.Button(logout_frame, text="üö™ ƒêƒÉng xu·∫•t",
                   command=self.logout).pack(side=tk.RIGHT)

        # Frame ch·ªçn ƒë·ªÅ thi
        self.exam_selection_frame = ttk.LabelFrame(self.main_frame, text="Ch·ªçn ƒë·ªÅ thi", padding="10")
        self.exam_selection_frame.grid(row=1, column=0, columnspan=2, sticky="nsew", pady=(0, 10))

        # Danh s√°ch ƒë·ªÅ thi
        ttk.Label(self.exam_selection_frame, text="ƒê·ªÅ thi c√≥ s·∫µn:").grid(row=0, column=0, sticky="w")

        # Treeview cho danh s√°ch ƒë·ªÅ thi
        columns = ("M√£ ƒë·ªÅ", "T√™n ƒë·ªÅ", "M√¥n h·ªçc", "Th·ªùi gian", "S·ªë c√¢u", "Tr·∫°ng th√°i")
        self.exam_tree = ttk.Treeview(self.exam_selection_frame, columns=columns, show="headings", height=5)

        for col in columns:
            self.exam_tree.heading(col, text=col)
            self.exam_tree.column(col, width=120)

        self.exam_tree.grid(row=1, column=0, columnspan=2, sticky="ew", pady=5)

        # Scrollbar cho treeview
        scrollbar = ttk.Scrollbar(self.exam_selection_frame, orient="vertical", command=self.exam_tree.yview)
        scrollbar.grid(row=1, column=2, sticky="ns")
        self.exam_tree.configure(yscrollcommand=scrollbar.set)

        # N√∫t b·∫Øt ƒë·∫ßu l√†m b√†i
        ttk.Button(self.exam_selection_frame, text="B·∫Øt ƒë·∫ßu l√†m b√†i",
                   command=self.start_exam).grid(row=2, column=0, columnspan=2, pady=10)

        # Frame l√†m b√†i thi (·∫©n ban ƒë·∫ßu)
        self.exam_frame = ttk.LabelFrame(self.main_frame, text="üìù L√†m b√†i thi",
                                         padding="15", style='Student.TFrame')

        # Header l√†m b√†i thi v·ªõi timer n·ªïi b·∫≠t
        exam_header_frame = ttk.Frame(self.exam_frame, style='Student.TFrame')
        exam_header_frame.pack(fill="x", pady=(0, 15))

        # Th√¥ng tin ƒë·ªÅ thi b√™n tr√°i
        exam_info_left = ttk.Frame(exam_header_frame, style='Student.TFrame')
        exam_info_left.pack(side=tk.LEFT)

        self.exam_title_label = ttk.Label(exam_info_left, text="",
                                          font=("Arial", 14, "bold"),
                                          foreground="#2c3e50",
                                          background='#f8f9fa')
        self.exam_title_label.pack(anchor="w")

        # B·ªô ƒë·∫øm th·ªùi gian n·ªïi b·∫≠t b√™n ph·∫£i
        timer_frame = ttk.Frame(exam_header_frame, style='Student.TFrame')
        timer_frame.pack(side=tk.RIGHT)

        timer_icon = ttk.Label(timer_frame, text="‚è∞",
                               font=("Arial", 20), background='#f8f9fa')
        timer_icon.pack(side=tk.LEFT, padx=(0, 10))

        self.time_label = ttk.Label(timer_frame, text="00:00",
                                    style="Timer.TLabel")
        self.time_label.pack(side=tk.LEFT)

        # Frame th√¥ng tin c√¢u h·ªèi
        question_info_frame = ttk.Frame(self.exam_frame, style='Student.TFrame')
        question_info_frame.pack(fill="x", pady=(0, 10))

        self.question_counter_label = ttk.Label(question_info_frame,
                                                text="C√¢u 1/1",
                                                font=("Arial", 12, "bold"),
                                                foreground="#3498db",
                                                background='#f8f9fa')
        self.question_counter_label.pack(side=tk.LEFT)

        # N√∫t n·ªôp b√†i
        submit_button = ttk.Button(question_info_frame, text="üì§ N·ªôp b√†i",
                                   command=lambda: self.submit_exam(auto_submit=False),
                                   style="AdminButton.TButton")
        submit_button.pack(side=tk.RIGHT)

        # Frame c√¢u h·ªèi
        self.question_frame = ttk.Frame(self.exam_frame)
        self.question_frame.pack(fill="both", expand=True, pady=10)

        self.question_text = tk.Text(self.question_frame, height=6, wrap="word", state="disabled")
        self.question_text.pack(fill="x", pady=(0, 10))

        # Frame ƒë√°p √°n
        self.options_frame = ttk.Frame(self.question_frame)
        self.options_frame.pack(fill="x")

        self.answer_var = tk.StringVar()
        self.option_buttons = {}

        for i, option in enumerate(['A', 'B', 'C', 'D']):
            btn = ttk.Radiobutton(self.options_frame, text="", variable=self.answer_var,
                                  value=option, command=self.save_answer)
            btn.grid(row=i, column=0, sticky="w", pady=2)
            self.option_buttons[option] = btn

        # Frame ƒëi·ªÅu h∆∞·ªõng
        navigation_frame = ttk.Frame(self.exam_frame)
        navigation_frame.pack(fill="x", pady=10)

        ttk.Button(navigation_frame, text="C√¢u tr∆∞·ªõc",
                   command=self.previous_question).pack(side=tk.LEFT)

        self.question_counter_label = ttk.Label(navigation_frame, text="")
        self.question_counter_label.pack(side=tk.LEFT, padx=20)

        ttk.Button(navigation_frame, text="C√¢u ti·∫øp",
                   command=self.next_question).pack(side=tk.LEFT)

        ttk.Button(navigation_frame, text="N·ªôp b√†i",
                   command=self.submit_exam).pack(side=tk.RIGHT)

        # Bind events
        self.exam_tree.bind("<Double-1>", self.on_exam_double_click)

    def load_available_exams(self):
        """T·∫£i danh s√°ch ƒë·ªÅ thi c√≥ s·∫µn v√† tr·∫°ng th√°i ƒë√£ l√†m"""
        try:
            exams = exam_service.get_exams()
            student_exams = student_exam_service.get_student_exams(student_id=self.current_user['id'])
            exam_status_map = {}  # exam_id -> (status, student_exam_id, score)
            for se in student_exams:
                if se['status'] != 'in_progress':
                    exam_status_map[se['exam_id']] = (se['status'], se['id'], se.get('score'))
            # X√≥a d·ªØ li·ªáu c≈©
            for item in self.exam_tree.get_children():
                self.exam_tree.delete(item)
            # Th√™m d·ªØ li·ªáu m·ªõi
            for exam in exams:
                status = "Ch∆∞a l√†m"
                student_exam_id = None
                score = None
                if exam['id'] in exam_status_map:
                    st, se_id, sc = exam_status_map[exam['id']]
                    status = f"ƒê√£ l√†m ({st})"
                    student_exam_id = se_id
                    score = sc
                self.exam_tree.insert("", "end", values=(
                    exam['exam_code'],
                    exam['title'],
                    exam['subject_name'],
                    f"{exam['duration']} ph√∫t",
                    exam['total_questions'],
                    status
                ), tags=(exam['id'], student_exam_id if student_exam_id else "", score if score else ""))
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi: {str(e)}")

    def on_exam_double_click(self, event):
        selection = self.exam_tree.selection()
        if not selection:
            return
        item = self.exam_tree.item(selection[0])
        tags = item['tags']
        exam_id = tags[0]
        student_exam_id = tags[1] if len(tags) > 1 and tags[1] else None
        if student_exam_id:
            self.show_exam_review(exam_id, student_exam_id)
        else:
            self.start_exam()

    def show_exam_review(self, exam_id, student_exam_id):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï xem l·∫°i b√†i thi ƒë√£ l√†m"""
        import tkinter as tk
        from tkinter import Toplevel, Label, Frame, Text, Scrollbar, VERTICAL, RIGHT, Y, END
        review_win = Toplevel(self.window)
        review_win.title("Xem l·∫°i b√†i thi")
        review_win.geometry("900x700")
        # L·∫•y d·ªØ li·ªáu
        exam = exam_service.get_exam(exam_id)
        questions = question_service.get_exam_questions(exam_id)
        answers = answer_service.get_answers(student_exam_id=student_exam_id)
        answer_map = {a['question_id']: a for a in answers}
        # Th·ªëng k√™
        correct_count = sum(1 for q in questions if answer_map.get(q['id'], {}).get('is_correct'))
        total_questions = len(questions)
        score = None
        for se in student_exam_service.get_student_exams(student_id=self.current_user['id']):
            if se['id'] == int(student_exam_id):
                score = se.get('score')
                break
        # Header
        Label(review_win, text=f"ƒê·ªÅ: {exam['title']} - {exam['subject_name']}", font=("Arial", 14, "bold")).pack(
            pady=10)
        Label(review_win,
              text=f"ƒêi·ªÉm: {score if score is not None else 0:.2f}/10 | S·ªë c√¢u ƒë√∫ng: {correct_count}/{total_questions}",
              font=("Arial", 12)).pack(pady=5)
        # Scrollable frame
        canvas = tk.Canvas(review_win)
        scrollbar = Scrollbar(review_win, orient=VERTICAL, command=canvas.yview)
        scroll_frame = Frame(canvas)
        scroll_frame.bind(
            "<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side=RIGHT, fill=Y)
        # Hi·ªÉn th·ªã t·ª´ng c√¢u h·ªèi
        for idx, q in enumerate(questions):
            qf = Frame(scroll_frame, bd=2, relief="groove", padx=8, pady=8)
            qf.pack(fill="x", pady=6, padx=8)
            Label(qf, text=f"C√¢u {idx + 1}: {q['question_text']}", font=("Arial", 11, "bold"), wraplength=800,
                  justify="left").pack(anchor="w")
            # ƒê√°p √°n ƒë√∫ng
            Label(qf, text=f"ƒê√°p √°n ƒë√∫ng: {q['correct_answer']}", fg="green").pack(anchor="w")
            # ƒê√°p √°n h·ªçc sinh
            ans = answer_map.get(q['id'])
            if ans:
                selected = ans.get('selected_answer')
                is_correct = ans.get('is_correct')
                color = "green" if is_correct else "red"
                Label(qf, text=f"B·∫°n ch·ªçn: {selected if selected else 'Kh√¥ng tr·∫£ l·ªùi'}", fg=color).pack(anchor="w")
            else:
                Label(qf, text="B·∫°n ch·ªçn: Kh√¥ng tr·∫£ l·ªùi", fg="red").pack(anchor="w")
        # ƒê√≥ng
        tk.Button(review_win, text="ƒê√≥ng", command=review_win.destroy).pack(pady=10)

    def start_exam(self):
        """B·∫Øt ƒë·∫ßu l√†m b√†i thi ho·∫∑c xem l·∫°i n·∫øu ƒë√£ l√†m"""
        selection = self.exam_tree.selection()
        if not selection:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ thi!")
            return
        item = self.exam_tree.item(selection[0])
        tags = item['tags']
        exam_id = tags[0]
        student_exam_id = tags[1] if len(tags) > 1 and tags[1] else None
        if student_exam_id:
            messagebox.showinfo("üìã Th√¥ng b√°o", "B·∫°n ƒë√£ l√†m ƒë·ªÅ n√†y r·ªìi. Chuy·ªÉn sang m√†n h√¨nh xem l·∫°i chi ti·∫øt b√†i thi.")
            self.show_exam_review(exam_id, student_exam_id)
            return

        # X√°c nh·∫≠n b·∫Øt ƒë·∫ßu l√†m b√†i
        try:
            exam_info = exam_service.get_exam(exam_id)

            # L·∫•y s·ªë c√¢u h·ªèi t·ª´ API
            questions = question_service.get_exam_questions(exam_id)
            question_count = len(questions) if questions else 0

            confirm_message = (
                f"üìù B·∫°n s·∫Øp b·∫Øt ƒë·∫ßu l√†m b√†i thi:\n\n"
                f"üìö T√™n ƒë·ªÅ: {exam_info.get('title', 'N/A')}\n"
                f"üìñ M√¥n h·ªçc: {exam_info.get('subject_name', 'N/A')}\n"
                f"‚è∞ Th·ªùi gian: {exam_info.get('duration', 0)} ph√∫t\n"
                f"‚ùì S·ªë c√¢u: {question_count} c√¢u\n\n"
                f"‚ö†Ô∏è L∆∞u √Ω:\n"
                f"‚Ä¢ Kh√¥ng th·ªÉ tho√°t ra ngo√†i khi ƒëang l√†m b√†i\n"
                f"‚Ä¢ B√†i thi s·∫Ω t·ª± ƒë·ªông n·ªôp khi h·∫øt gi·ªù\n"
                f"‚Ä¢ H√£y ƒë·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën b·∫Øt ƒë·∫ßu l√†m b√†i?"
            )
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·ªÅ thi: {str(e)}")
            return

        result = messagebox.askyesno("üöÄ B·∫Øt ƒë·∫ßu l√†m b√†i", confirm_message, icon='question')
        if not result:
            return

        try:
            exam = exam_service.get_exam(exam_id)
            self.current_exam = exam
            # L·∫•y ƒë√∫ng danh s√°ch c√¢u h·ªèi c·ªßa ƒë·ªÅ thi
            questions = question_service.get_exam_questions(exam_id)
            self.questions = questions
            if not self.questions:
                messagebox.showerror("‚ùå L·ªói", "ƒê·ªÅ thi kh√¥ng c√≥ c√¢u h·ªèi!")
                return
            student_exam = student_exam_service.create_student_exam(self.current_user['id'], exam_id)
            self.student_exam_id = student_exam['id']
            # Kh·ªüi t·∫°o
            self.current_question_index = 0
            self.answers = {}
            self.start_time = datetime.datetime.now()
            # Hi·ªÉn th·ªã giao di·ªán l√†m b√†i
            self.exam_selection_frame.grid_remove()
            self.exam_frame.grid(row=1, column=0, columnspan=2, sticky="nsew")
            # Hi·ªÉn th·ªã c√¢u h·ªèi ƒë·∫ßu ti√™n
            self.display_question()
            # B·∫Øt ƒë·∫ßu ƒë·∫øm th·ªùi gian
            self.update_timer()

            # Th√¥ng b√°o b·∫Øt ƒë·∫ßu
            duration = exam.get('duration', 0)
            messagebox.showinfo("üéØ B·∫Øt ƒë·∫ßu!",
                                f"üìù B√†i thi ƒë√£ b·∫Øt ƒë·∫ßu!\n"
                                f"‚è∞ Th·ªùi gian: {duration} ph√∫t\n"
                                f"‚ùì S·ªë c√¢u: {len(self.questions)} c√¢u\n\n"
                                f"Ch√∫c b·∫°n l√†m b√†i t·ªët! üçÄ")
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu b√†i thi: {str(e)}")

    def display_question(self):
        """Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i"""
        if not self.questions or self.current_question_index >= len(self.questions):
            return

        question = self.questions[self.current_question_index]

        # C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªÅ thi
        if self.current_exam:
            title = self.current_exam.get('title', 'N/A')
            subject_name = self.current_exam.get('subject_name', 'N/A')
            self.exam_title_label.config(text=f"{title} - {subject_name}")

        # Hi·ªÉn th·ªã c√¢u h·ªèi
        self.question_text.config(state="normal")
        self.question_text.delete(1.0, tk.END)
        question_text = question.get('question_text', 'Kh√¥ng c√≥ n·ªôi dung c√¢u h·ªèi')
        self.question_text.insert(1.0, f"C√¢u {self.current_question_index + 1}: {question_text}")
        self.question_text.config(state="disabled")

        # Hi·ªÉn th·ªã ƒë√°p √°n
        options = [
            ('A', question.get('option_a', 'Kh√¥ng c√≥ ƒë√°p √°n')),
            ('B', question.get('option_b', 'Kh√¥ng c√≥ ƒë√°p √°n')),
            ('C', question.get('option_c', 'Kh√¥ng c√≥ ƒë√°p √°n')),
            ('D', question.get('option_d', 'Kh√¥ng c√≥ ƒë√°p √°n'))
        ]

        for option, text in options:
            if option in self.option_buttons:
                self.option_buttons[option].config(text=f"{option}. {text}")

        # C·∫≠p nh·∫≠t c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
        question_id = question.get('id')
        if question_id and question_id in self.answers:
            self.answer_var.set(self.answers[question_id])
        else:
            self.answer_var.set("")

        # C·∫≠p nh·∫≠t s·ªë c√¢u
        self.question_counter_label.config(
            text=f"C√¢u {self.current_question_index + 1}/{len(self.questions)}"
        )

    def save_answer(self):
        """L∆∞u c√¢u tr·∫£ l·ªùi"""
        if not self.questions or self.current_question_index >= len(self.questions):
            return

        question = self.questions[self.current_question_index]
        question_id = question.get('id')
        selected_answer = self.answer_var.get()

        if question_id and selected_answer:
            self.answers[question_id] = selected_answer

    def next_question(self):
        """Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi ti·∫øp theo"""
        self.save_answer()

        if self.current_question_index < len(self.questions) - 1:
            self.current_question_index += 1
            self.display_question()

    def previous_question(self):
        """Chuy·ªÉn ƒë·∫øn c√¢u h·ªèi tr∆∞·ªõc"""
        self.save_answer()

        if self.current_question_index > 0:
            self.current_question_index -= 1
            self.display_question()

    def update_timer(self):
        if not self.start_time or not self.current_exam:
            return

        elapsed = datetime.datetime.now() - self.start_time
        duration = self.current_exam.get('duration', 0)
        remaining = datetime.timedelta(minutes=duration) - elapsed

        if remaining.total_seconds() <= 0:
            messagebox.showinfo("‚è∞ H·∫øt gi·ªù", "ƒê√£ h·∫øt th·ªùi gian l√†m b√†i, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông n·ªôp b√†i!")
            self.submit_exam(auto_submit=True)
            return

        minutes = int(remaining.total_seconds() // 60)
        seconds = int(remaining.total_seconds() % 60)

        # ƒê·ªïi m√†u timer d·ª±a tr√™n th·ªùi gian c√≤n l·∫°i
        if remaining.total_seconds() <= 300:  # 5 ph√∫t cu·ªëi
            self.time_label.config(
                text=f"{minutes:02d}:{seconds:02d}",
                foreground="#e74c3c",  # ƒê·ªè
                font=("Arial", 16, "bold")
            )
        elif remaining.total_seconds() <= 600:  # 10 ph√∫t cu·ªëi
            self.time_label.config(
                text=f"{minutes:02d}:{seconds:02d}",
                foreground="#f39c12",  # Cam
                font=("Arial", 15, "bold")
            )
        else:
            self.time_label.config(
                text=f"{minutes:02d}:{seconds:02d}",
                foreground="#27ae60",  # Xanh
                font=("Arial", 14, "bold")
            )

        self.window.after(1000, self.update_timer)

    def submit_exam(self, auto_submit=False):
        self.save_answer()

        if not self.questions:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ c√¢u h·ªèi n√†o trong ƒë·ªÅ!")
            return

        total_questions = len(self.questions)
        answered_questions = len(self.answers)
        unanswered_questions = total_questions - answered_questions
        unanswered_list = [f"C√¢u {i + 1}" for i, q in enumerate(self.questions) if q['id'] not in self.answers]

        # N·∫øu l√† auto_submit (h·∫øt gi·ªù), ch·ªâ th√¥ng b√°o h·∫øt gi·ªù v√† n·ªôp lu√¥n
        if auto_submit:
            messagebox.showinfo("H·∫øt th·ªùi gian", "‚è∞ ƒê√£ h·∫øt th·ªùi gian l√†m b√†i. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông n·ªôp b√†i c·ªßa b·∫°n.")
        else:
            # N·∫øu c√≤n c√¢u ch∆∞a tr·∫£ l·ªùi, c·∫£nh b√°o ri√™ng, n·∫øu b·∫•m ti·∫øp m·ªõi n·ªôp th·∫≠t
            if unanswered_questions > 0:
                confirm_message = (
                        f"B·∫°n c√≤n {unanswered_questions} c√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi.\n"
                        f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng?\n\n"
                        f"‚ùì C√¢u h·ªèi ch∆∞a tr·∫£ l·ªùi:\n‚Ä¢ " + "\n‚Ä¢ ".join(unanswered_list[:5])
                )
                if len(unanswered_list) > 5:
                    confirm_message += f"\n‚Ä¢ ... v√† {len(unanswered_list) - 5} c√¢u kh√°c"
                confirm_message += "\n\n‚ö†Ô∏è Sau khi n·ªôp b√†i, b·∫°n kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi c√¢u tr·∫£ l·ªùi!"
                result = messagebox.askyesno("C·∫£nh b√°o", confirm_message, icon='warning')
                if not result:
                    return
            else:
                # N·∫øu ƒë√£ tr·∫£ l·ªùi h·∫øt, x√°c nh·∫≠n n·ªôp b√†i nh∆∞ b√¨nh th∆∞·ªùng
                result = messagebox.askyesno(
                    "X√°c nh·∫≠n n·ªôp b√†i",
                    "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i kh√¥ng? Sau khi n·ªôp, b·∫°n kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi c√¢u tr·∫£ l·ªùi!",
                    icon='question'
                )
                if not result:
                    return

        try:
            correct_count = 0
            for question in self.questions:
                question_id = question.get('id')
                correct_answer = question.get('correct_answer')
                selected_answer = self.answers.get(question_id)

                if question_id and correct_answer:
                    is_correct = (selected_answer == correct_answer) if selected_answer else False
                    if is_correct:
                        correct_count += 1
                    answer_service.create_answer(self.student_exam_id, question_id, selected_answer, is_correct)

            # T√≠nh ƒëi·ªÉm d·ª±a tr√™n ƒëi·ªÉm s·ªë t·ª´ng c√¢u
            score = student_exam_service.calculate_score(self.student_exam_id)
            student_exam_service.update_student_exam_score(self.student_exam_id, score)

            messagebox.showinfo("üéØ K·∫øt qu·∫£",
                                f"‚úÖ ƒêi·ªÉm c·ªßa b·∫°n: {score:.2f}/10\n"
                                f"üìù S·ªë c√¢u ƒë√∫ng: {correct_count}/{total_questions}\n"
                                f"üìä T·ª∑ l·ªá ƒë√∫ng: {(correct_count / total_questions) * 100:.1f}%")
            self.back_to_exam_selection()
        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ n·ªôp b√†i: {str(e)}")

    def back_to_exam_selection(self):
        """Quay l·∫°i m√†n h√¨nh ch·ªçn ƒë·ªÅ thi"""
        # D·ª´ng timer n·∫øu ƒëang ch·∫°y
        if hasattr(self, 'start_time') and self.start_time:
            self.start_time = None

        self.exam_frame.grid_remove()
        self.exam_selection_frame.grid(row=1, column=0, columnspan=2, sticky="nsew", pady=(0, 10))
        self.load_available_exams()

    def back_to_login(self):
        """Quay l·∫°i c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        # Ch·ªâ ƒë√≥ng window hi·ªán t·∫°i, parent window v·∫´n hi·ªÉn th·ªã
        self.window.destroy()

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        # Ki·ªÉm tra xem c√≥ ƒëang l√†m b√†i thi kh√¥ng
        if hasattr(self, 'start_time') and self.start_time:
            result = messagebox.askyesno(
                "‚ö†Ô∏è C·∫£nh b√°o",
                "B·∫°n ƒëang l√†m b√†i thi!\n\n"
                "N·∫øu ƒë√≥ng c·ª≠a s·ªï n√†y, b√†i thi s·∫Ω b·ªã h·ªßy v√† b·∫°n s·∫Ω m·∫•t t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi.\n\n"
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t?",
                icon='warning'
            )
            if result:
                # N·ªôp b√†i tr∆∞·ªõc khi tho√°t
                self.submit_exam(auto_submit=True)
            else:
                return  # Kh√¥ng ƒë√≥ng c·ª≠a s·ªï

        # N·∫øu kh√¥ng l√†m b√†i thi, tho√°t b√¨nh th∆∞·ªùng
        self.parent.current_user = None
        self.window.destroy()
        messagebox.showinfo("üëã Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay v·ªÅ c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        # Ki·ªÉm tra xem c√≥ ƒëang l√†m b√†i thi kh√¥ng
        if hasattr(self, 'start_time') and self.start_time:
            result = messagebox.askyesno(
                "‚ö†Ô∏è C·∫£nh b√°o",
                "B·∫°n ƒëang l√†m b√†i thi!\n\n"
                "N·∫øu ƒëƒÉng xu·∫•t, b√†i thi s·∫Ω b·ªã h·ªßy v√† b·∫°n s·∫Ω m·∫•t t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi.\n\n"
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
                icon='warning'
            )
            if not result:
                return

        # Ch·ªâ ƒë√≥ng dialog n√†y, kh√¥ng ƒë√≥ng parent window
        self.window.destroy()

        # N·∫øu parent l√† ExamBankApp, quay v·ªÅ login
        if hasattr(self.parent, 'show_login_after_logout'):
            self.parent.show_login_after_logout()
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")