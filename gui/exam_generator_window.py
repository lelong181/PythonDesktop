import tkinter as tk
from tkinter import ttk, messagebox
from services import subject_service, exam_service, question_service
from gui.styles import ModernStyles
import datetime


class ExamGeneratorWindow:
    def __init__(self, parent, auth_manager):
        self.parent = parent
        # L·∫•y current_user t·ª´ parent n·∫øu c√≥
        self.current_user = getattr(parent, 'current_user', None)
        # N·∫øu parent c√≥ thu·ªôc t√≠nh window th√¨ truy·ªÅn parent.window, c√≤n kh√¥ng th√¨ truy·ªÅn parent
        # tk_parent = parent.window if hasattr(parent, 'window') else parent
        # self.window = tk.Toplevel(tk_parent)
        self.window = tk.Toplevel(self.parent.root)
        self.window.title("üìä Qu·∫£n l√Ω ƒë·ªÅ thi - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("1000x700")

        # Apply modern styling
        ModernStyles.apply_modern_style()
        self.window.configure(bg=ModernStyles.COLORS['light'])

        # Center window
        ModernStyles.center_window(self.window, 1000, 700)

        self.setup_ui()
        self.load_subjects()
        self.load_exams()

        # Th√™m event handler ƒë·ªÉ ƒë·∫£m b·∫£o parent window ƒë∆∞·ª£c hi·ªÉn th·ªã khi ƒë√≥ng window n√†y
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi sinh ƒë·ªÅ"""
        self.window.title("Ng∆∞·ªùi sinh ƒë·ªÅ - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("800x600")

        # Frame ch√≠nh
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.grid(row=0, column=0, sticky="nsew")

        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))

        user_info = self.current_user
        if user_info and 'full_name' in user_info:
            name = user_info['full_name']
        else:
            name = "Qu·∫£n tr·ªã vi√™n"
        ttk.Label(header_frame, text=f"Ch√†o m·ª´ng: {name}",
                  font=("Arial", 12, "bold")).pack(side=tk.LEFT)

        # N√∫t quay l·∫°i v√† ƒëƒÉng xu·∫•t
        button_frame = ttk.Frame(header_frame)
        button_frame.pack(side=tk.RIGHT)

        ttk.Button(button_frame, text="‚¨ÖÔ∏è Quay l·∫°i",
                   command=self.back_to_admin).pack(side=tk.LEFT, padx=(0, 10))

        ttk.Button(button_frame, text="ƒêƒÉng xu·∫•t",
                   command=self.logout).pack(side=tk.RIGHT)

        # Frame t·∫°o ƒë·ªÅ thi m·ªõi
        create_frame = ttk.LabelFrame(main_frame, text="T·∫°o ƒë·ªÅ thi m·ªõi", padding="10")
        create_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, 10))

        # M√£ ƒë·ªÅ
        ttk.Label(create_frame, text="M√£ ƒë·ªÅ:").grid(row=0, column=0, sticky="w", pady=2)
        self.exam_code_var = tk.StringVar()
        ttk.Entry(create_frame, textvariable=self.exam_code_var, width=20).grid(row=0, column=1, padx=(10, 0),
                                                                                sticky="w")

        # T√™n ƒë·ªÅ
        ttk.Label(create_frame, text="T√™n ƒë·ªÅ:").grid(row=0, column=2, sticky="w", padx=(20, 0), pady=2)
        self.exam_title_var = tk.StringVar()
        ttk.Entry(create_frame, textvariable=self.exam_title_var, width=30).grid(row=0, column=3, padx=(10, 0),
                                                                                 sticky="w")

        # M√¥n h·ªçc
        ttk.Label(create_frame, text="M√¥n h·ªçc:").grid(row=1, column=0, sticky="w", pady=2)
        self.subject_var = tk.StringVar()
        self.subject_combo = ttk.Combobox(create_frame, textvariable=self.subject_var,
                                          state="readonly", width=20)
        self.subject_combo.grid(row=1, column=1, padx=(10, 0), sticky="w")

        # S·ªë c√¢u h·ªèi
        ttk.Label(create_frame, text="S·ªë c√¢u h·ªèi:").grid(row=1, column=2, sticky="w", padx=(20, 0), pady=2)
        self.question_count_var = tk.StringVar(value="20")
        ttk.Entry(create_frame, textvariable=self.question_count_var, width=10).grid(row=1, column=3, padx=(10, 0),
                                                                                     sticky="w")

        # Th·ªùi gian l√†m b√†i
        ttk.Label(create_frame, text="Th·ªùi gian (ph√∫t):").grid(row=2, column=0, sticky="w", pady=2)
        self.duration_var = tk.StringVar(value="30")
        duration_frame = ttk.Frame(create_frame)
        duration_frame.grid(row=2, column=1, padx=(10, 0), sticky="w")
        ttk.Entry(duration_frame, textvariable=self.duration_var, width=10).pack(side=tk.LEFT)
        ttk.Label(duration_frame, text="(15-180 ph√∫t)", font=("Arial", 8), foreground="gray").pack(side=tk.LEFT,
                                                                                                   padx=(5, 0))

        # N√∫t t·∫°o ƒë·ªÅ
        ttk.Button(create_frame, text="üéØ T·∫°o ƒë·ªÅ thi",
                   command=self.create_exam).grid(row=2, column=2, columnspan=2, padx=(20, 0), pady=10)

        # Frame qu·∫£n l√Ω m√¥n h·ªçc
        subject_mgmt_frame = ttk.LabelFrame(main_frame, text="Qu·∫£n l√Ω m√¥n h·ªçc", padding="10")
        subject_mgmt_frame.grid(row=3, column=0, columnspan=2, sticky="ew", pady=(0, 10))

        # N√∫t qu·∫£n l√Ω m√¥n h·ªçc duy nh·∫•t
        ttk.Button(subject_mgmt_frame, text="üìö Qu·∫£n l√Ω m√¥n h·ªçc",
                   command=self.open_subject_management_dialog,
                   style='AdminButton.TButton').pack(pady=10)

        # Frame danh s√°ch ƒë·ªÅ thi
        exams_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch ƒë·ªÅ thi", padding="10")
        exams_frame.grid(row=4, column=0, columnspan=2, sticky="nsew")

        # Treeview cho danh s√°ch ƒë·ªÅ thi v·ªõi c·ªôt thao t√°c
        columns = ("M√£ ƒë·ªÅ", "T√™n ƒë·ªÅ", "M√¥n h·ªçc", "Th·ªùi gian", "S·ªë c√¢u", "Ng√†y t·∫°o", "Thao t√°c")
        self.exams_tree = ttk.Treeview(exams_frame, columns=columns, show="headings", height=10)

        # C·∫•u h√¨nh c·ªôt
        column_widths = {
            "M√£ ƒë·ªÅ": 80,
            "T√™n ƒë·ªÅ": 180,
            "M√¥n h·ªçc": 120,
            "Th·ªùi gian": 80,
            "S·ªë c√¢u": 60,
            "Ng√†y t·∫°o": 120,
            "Thao t√°c": 100
        }

        for col in columns:
            self.exams_tree.heading(col, text=col)
            self.exams_tree.column(col, width=column_widths[col], minwidth=50)

        self.exams_tree.grid(row=0, column=0, sticky="nsew")

        # Scrollbar
        scrollbar = ttk.Scrollbar(exams_frame, orient="vertical", command=self.exams_tree.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.exams_tree.configure(yscrollcommand=scrollbar.set)

        # Frame n√∫t ch·ª©c nƒÉng ƒë∆°n gi·∫£n
        button_frame = ttk.Frame(exams_frame)
        button_frame.grid(row=1, column=0, columnspan=2, pady=10)

        # N√∫t xem chi ti·∫øt
        ttk.Button(button_frame, text="üëÅÔ∏è Xem chi ti·∫øt",
                   command=self.view_exam_details).pack(side=tk.LEFT, padx=(0, 10))

        # N√∫t x√≥a ƒë·ªÅ thi
        ttk.Button(button_frame, text="üóëÔ∏è X√≥a ƒë·ªÅ thi",
                   command=self.delete_exam).pack(side=tk.LEFT, padx=(0, 10))

        # C·∫•u h√¨nh grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(2, weight=1)
        exams_frame.columnconfigure(0, weight=1)
        exams_frame.rowconfigure(0, weight=1)
        create_frame.columnconfigure(3, weight=1)

        # Bind events
        self.exams_tree.bind("<Button-1>", self.on_exam_tree_click)

    def load_subjects(self):
        """T·∫£i danh s√°ch m√¥n h·ªçc"""
        try:
            from services.api_client import clear_cache

            # X√≥a cache tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
            clear_cache()

            subjects = subject_service.get_subjects()

            subject_dict = {}
            subject_names = []

            for subject in subjects:
                subject_dict[subject['name']] = subject['id']
                subject_names.append(subject['name'])

            self.subject_combo['values'] = subject_names
            self.subject_dict = subject_dict

            if subject_names:
                self.subject_combo.set(subject_names[0])

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc: {str(e)}")

    def load_exams(self):
        """T·∫£i danh s√°ch ƒë·ªÅ thi"""
        try:
            from services.api_client import clear_cache

            # X√≥a cache tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
            clear_cache()
            clear_cache()  # Clear cache 2 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o

            exams = exam_service.get_exams()

            # X√≥a d·ªØ li·ªáu c≈©
            for item in self.exams_tree.get_children():
                self.exams_tree.delete(item)

            # Th√™m d·ªØ li·ªáu m·ªõi
            for exam in exams:
                created_at = exam.get('created_at')
                if isinstance(created_at, str):
                    try:
                        created_date = datetime.datetime.fromisoformat(created_at).strftime('%d/%m/%Y %H:%M')
                    except Exception:
                        created_date = created_at
                else:
                    created_date = created_at.strftime('%d/%m/%Y %H:%M')
                self.exams_tree.insert("", "end", values=(
                    exam['exam_code'],
                    exam['title'],
                    exam['subject_name'],
                    f"{exam['duration']} ph√∫t",
                    exam['total_questions'],
                    created_date,
                    "üóëÔ∏è X√≥a"  # N√∫t x√≥a trong c·ªôt thao t√°c
                ), tags=(exam['id'],))

            # C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
            self.exams_tree.update()

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªÅ thi: {str(e)}")

    def create_exam(self):
        """T·∫°o ƒë·ªÅ thi m·ªõi"""
        exam_code = self.exam_code_var.get().strip()
        exam_title = self.exam_title_var.get().strip()
        subject_name = self.subject_var.get()
        question_count = self.question_count_var.get().strip()
        duration = self.duration_var.get().strip()

        # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if not all([exam_code, exam_title, subject_name, question_count, duration]):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return

        try:
            question_count = int(question_count)
            duration = int(duration)

            if question_count <= 0:
                messagebox.showwarning("C·∫£nh b√°o", "S·ªë c√¢u h·ªèi ph·∫£i l·ªõn h∆°n 0!")
                return

            if duration < 15 or duration > 180:
                messagebox.showwarning("C·∫£nh b√°o", "Th·ªùi gian l√†m b√†i ph·∫£i t·ª´ 15 ƒë·∫øn 180 ph√∫t!")
                return

        except ValueError:
            messagebox.showwarning("C·∫£nh b√°o", "S·ªë c√¢u h·ªèi v√† th·ªùi gian ph·∫£i l√† s·ªë!")
            return

        subject_id = self.subject_dict.get(subject_name)

        try:
            # Ki·ªÉm tra m√£ ƒë·ªÅ ƒë√£ t·ªìn t·∫°i ch∆∞a
            existing_exam = exam_service.get_exam_by_code(exam_code)

            if existing_exam:
                messagebox.showerror("L·ªói", "M√£ ƒë·ªÅ ƒë√£ t·ªìn t·∫°i!")
                return

            # Ki·ªÉm tra s·ªë c√¢u h·ªèi c√≥ s·∫µn
            available_questions = question_service.get_available_questions_count(subject_id)

            if not available_questions or available_questions['count'] < question_count:
                messagebox.showerror("L·ªói", f"Kh√¥ng ƒë·ªß c√¢u h·ªèi cho m√¥n {subject_name}! "
                                            f"C·∫ßn {question_count} c√¢u, c√≥ s·∫µn {available_questions['count'] if available_questions else 0} c√¢u.")
                return

            # L·∫•y user_id t·∫°o ƒë·ªÅ
            user_id = self.current_user['id'] if self.current_user and 'id' in self.current_user else None
            if not user_id:
                messagebox.showerror("L·ªói",
                                     "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi t·∫°o ƒë·ªÅ. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
                return

            # T·∫°o ƒë·ªÅ thi
            exam_id = exam_service.create_exam(exam_code, subject_id, exam_title, duration, question_count, user_id)

            # Ch·ªçn c√¢u h·ªèi ng·∫´u nhi√™n v√† x√°o tr·ªôn
            questions = question_service.get_random_questions(subject_id, question_count)

            # Th√™m c√¢u h·ªèi v√†o ƒë·ªÅ thi v·ªõi th·ª© t·ª± ng·∫´u nhi√™n
            exam_questions = []
            # N·∫øu exam_id l√† object (dict), l·∫•y tr∆∞·ªùng 'id'
            if isinstance(exam_id, dict):
                exam_id = exam_id.get('id')
            for i, question in enumerate(questions):
                qid = question['id'] if isinstance(question, dict) else question
                exam_questions.append((exam_id, qid, i + 1))
            question_service.add_questions_to_exam(exam_questions)

            messagebox.showinfo("üéØ Th√†nh c√¥ng",
                                f"‚úÖ ƒê√£ t·∫°o ƒë·ªÅ thi {exam_code} th√†nh c√¥ng!\n\n"
                                f"üìù Th√¥ng tin ƒë·ªÅ thi:\n"
                                f"‚Ä¢ T√™n ƒë·ªÅ: {exam_title}\n"
                                f"‚Ä¢ M√¥n h·ªçc: {subject_name}\n"
                                f"‚Ä¢ S·ªë c√¢u: {question_count} c√¢u\n"
                                f"‚Ä¢ Th·ªùi gian: {duration} ph√∫t\n"
                                f"‚Ä¢ C√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x√°o tr·ªôn ng·∫´u nhi√™n\n\n"
                                f"üé≤ M·ªói l·∫ßn l√†m b√†i, th·ª© t·ª± c√¢u h·ªèi s·∫Ω kh√°c nhau!")

            # X√≥a form
            self.exam_code_var.set("")
            self.exam_title_var.set("")
            self.question_count_var.set("20")
            self.duration_var.set("30")

            # C·∫≠p nh·∫≠t danh s√°ch ngay l·∫≠p t·ª©c v·ªõi th√¥ng b√°o
            from services.api_client import clear_cache
            clear_cache()
            clear_cache()  # Clear cache 2 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o
            self.window.after(50, self.load_exams)  # Gi·∫£m delay xu·ªëng 50ms

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o ƒë·ªÅ thi: {str(e)}")

    def view_exam_details(self):
        """Xem chi ti·∫øt ƒë·ªÅ thi"""
        selection = self.exams_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ thi!")
            return

        exam_id = self.exams_tree.item(selection[0], "tags")[0]

        try:
            # L·∫•y th√¥ng tin ƒë·ªÅ thi
            exam_info = exam_service.get_exam_by_id(exam_id)

            if not exam_info:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªÅ thi!")
                return

            exam = exam_info

            # L·∫•y danh s√°ch c√¢u h·ªèi
            questions = question_service.get_exam_questions(exam_id)

            # Hi·ªÉn th·ªã dialog chi ti·∫øt
            self.show_exam_details_dialog(exam, questions)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xem chi ti·∫øt ƒë·ªÅ thi: {str(e)}")

    def show_exam_details_dialog(self, exam, questions):
        """Hi·ªÉn th·ªã dialog chi ti·∫øt ƒë·ªÅ thi"""
        dialog = tk.Toplevel(self.window)
        dialog.title(f"Chi ti·∫øt ƒë·ªÅ thi: {exam['exam_code']}")
        dialog.geometry("700x500")
        dialog.transient(self.window)
        dialog.grab_set()

        # Frame ch√≠nh
        main_frame = ttk.Frame(dialog, padding="10")
        main_frame.pack(fill="both", expand=True)

        # Th√¥ng tin ƒë·ªÅ thi
        info_frame = ttk.LabelFrame(main_frame, text="Th√¥ng tin ƒë·ªÅ thi", padding="10")
        info_frame.pack(fill="x", pady=(0, 10))

        created_at = exam.get('created_at')
        if isinstance(created_at, str):
            try:
                created_date = datetime.datetime.fromisoformat(created_at).strftime('%d/%m/%Y %H:%M')
            except Exception:
                created_date = created_at
        else:
            created_date = created_at.strftime('%d/%m/%Y %H:%M')

        info_text = f"""
        M√£ ƒë·ªÅ: {exam['exam_code']}
        T√™n ƒë·ªÅ: {exam['title']}
        M√¥n h·ªçc: {exam['subject_name']}
        Th·ªùi gian: {exam['duration']} ph√∫t
        S·ªë c√¢u h·ªèi: {exam['total_questions']}
        Ng√†y t·∫°o: {created_date}
        """

        ttk.Label(info_frame, text=info_text, justify=tk.LEFT).pack(anchor="w")

        # Frame c√¢u h·ªèi
        questions_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch c√¢u h·ªèi", padding="10")
        questions_frame.pack(fill="both", expand=True)

        # Text widget cho c√¢u h·ªèi
        text_widget = tk.Text(questions_frame, wrap="word", state="disabled")
        text_widget.pack(fill="both", expand=True)

        # Scrollbar
        scrollbar = ttk.Scrollbar(questions_frame, orient="vertical", command=text_widget.yview)
        scrollbar.pack(side="right", fill="y")
        text_widget.configure(yscrollcommand=scrollbar.set)

        # Hi·ªÉn th·ªã c√¢u h·ªèi
        text_widget.config(state="normal")
        for i, question in enumerate(questions, 1):
            text_widget.insert(tk.END, f"C√¢u {i}: {question['question_text']}\n")
            text_widget.insert(tk.END, f"A. {question['option_a']}\n")
            text_widget.insert(tk.END, f"B. {question['option_b']}\n")
            text_widget.insert(tk.END, f"C. {question['option_c']}\n")
            text_widget.insert(tk.END, f"D. {question['option_d']}\n")
            text_widget.insert(tk.END, f"ƒê√°p √°n ƒë√∫ng: {question['correct_answer']}\n")
            text_widget.insert(tk.END, "-" * 50 + "\n\n")
        text_widget.config(state="disabled")

    def on_exam_tree_click(self, event):
        """X·ª≠ l√Ω click v√†o treeview ƒë·ªÅ thi"""
        region = self.exams_tree.identify("region", event.x, event.y)
        if region == "cell":
            column = self.exams_tree.identify_column(event.x)
            if column == "#7":  # C·ªôt "Thao t√°c"
                item = self.exams_tree.identify_row(event.y)
                if item:
                    exam_id = self.exams_tree.item(item, "tags")[0]
                    self.delete_exam_by_id(exam_id)

    def delete_exam_by_id(self, exam_id):
        """X√≥a ƒë·ªÅ thi theo ID"""
        try:
            # L·∫•y th√¥ng tin ƒë·ªÅ thi
            exam_info = exam_service.get_exam_by_id(exam_id)
            if not exam_info:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë·ªÅ thi!")
                return

            exam_code = exam_info['exam_code']

            result = messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªÅ thi {exam_code}?")

            if result:
                # X√≥a ƒë·ªÅ thi (API s·∫Ω t·ª± ƒë·ªông x√≥a c√°c b·∫£n ghi li√™n quan)
                exam_service.delete_exam(exam_id)

                messagebox.showinfo("‚úÖ Th√†nh c√¥ng",
                                    f"ƒê√£ x√≥a ƒë·ªÅ thi {exam_code} th√†nh c√¥ng!\n\nüîÑ ƒêang l√†m m·ªõi danh s√°ch ƒë·ªÅ thi...")
                # C·∫≠p nh·∫≠t danh s√°ch ngay l·∫≠p t·ª©c v·ªõi nhi·ªÅu l·∫ßn clear cache
                from services.api_client import clear_cache
                clear_cache()
                clear_cache()  # Clear cache 2 l·∫ßn ƒë·ªÉ ƒë·∫£m b·∫£o
                self.window.after(50, self.load_exams)  # Gi·∫£m delay xu·ªëng 50ms

        except Exception as e:
            messagebox.showerror("‚ùå L·ªói", f"Kh√¥ng th·ªÉ x√≥a ƒë·ªÅ thi: {str(e)}")

    def delete_exam(self):
        """X√≥a ƒë·ªÅ thi ƒë∆∞·ª£c ch·ªçn"""
        selection = self.exams_tree.selection()
        if not selection:
            messagebox.showwarning("‚ö†Ô∏è C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m·ªôt ƒë·ªÅ thi ƒë·ªÉ x√≥a!")
            return

        # L·∫•y th√¥ng tin ƒë·ªÅ thi t·ª´ d√≤ng ƒë∆∞·ª£c ch·ªçn
        item = selection[0]
        values = self.exams_tree.item(item, "values")
        exam_id = self.exams_tree.item(item, "tags")[0]
        exam_code = values[0]  # M√£ ƒë·ªÅ
        exam_title = values[1]  # T√™n ƒë·ªÅ

        # Hi·ªÉn th·ªã th√¥ng tin x√°c nh·∫≠n chi ti·∫øt h∆°n
        result = messagebox.askyesno(
            "üóëÔ∏è X√°c nh·∫≠n x√≥a ƒë·ªÅ thi",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒë·ªÅ thi n√†y?\n\n"
            f"üìù M√£ ƒë·ªÅ: {exam_code}\n"
            f"üìã T√™n ƒë·ªÅ: {exam_title}\n\n"
            f"‚ö†Ô∏è L∆∞u √Ω: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
        )

        if result:
            self.delete_exam_by_id(exam_id)

    def back_to_admin(self):
        """Quay l·∫°i m√†n h√¨nh Admin ch√≠nh"""
        # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin v√† ƒë√≥ng c·ª≠a s·ªï hi·ªán t·∫°i
        if hasattr(self.parent, 'window'):
            self.parent.window.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï admin
        self.window.destroy()

    def logout(self):
        """ƒêƒÉng xu·∫•t v√† quay v·ªÅ c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        self.window.destroy()
        # Ki·ªÉm tra parent type ƒë·ªÉ x·ª≠ l√Ω logout ƒë√∫ng c√°ch
        if hasattr(self.parent, 'show_login_after_logout'):
            # N·∫øu parent l√† ExamBankApp
            self.parent.show_login_after_logout()
        else:
            # N·∫øu parent l√† window kh√°c, t√¨m ExamBankApp
            current_parent = self.parent
            while hasattr(current_parent, 'parent'):
                current_parent = current_parent.parent
                if hasattr(current_parent, 'show_login_after_logout'):
                    current_parent.show_login_after_logout()
                    break
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!")

    def on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng window"""
        self.back_to_admin()

    def open_subject_management_dialog(self):
        """M·ªü dialog qu·∫£n l√Ω m√¥n h·ªçc v·ªõi t·∫•t c·∫£ ch·ª©c nƒÉng"""
        dialog = tk.Toplevel(self.window)
        dialog.title("Qu·∫£n l√Ω m√¥n h·ªçc")
        dialog.geometry("900x700")
        dialog.transient(self.window)
        dialog.grab_set()
        dialog.resizable(True, True)

        # CƒÉn gi·ªØa dialog
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (900 // 2)
        y = (dialog.winfo_screenheight() // 2) - (700 // 2)
        dialog.geometry(f"900x700+{x}+{y}")

        # Main container frame
        main_frame = ttk.Frame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Header
        header_label = ttk.Label(main_frame, text="üìö Qu·∫£n l√Ω m√¥n h·ªçc", font=("Arial", 18, "bold"))
        header_label.pack(pady=(0, 20))

        # Frame ch·ª©a c√°c n√∫t ch·ª©c nƒÉng
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill="x", pady=(0, 15))

        # N√∫t t·∫°o m√¥n h·ªçc m·ªõi
        ttk.Button(button_frame, text="‚ûï T·∫°o m√¥n h·ªçc m·ªõi",
                   command=lambda: self.create_subject(dialog),
                   width=20).pack(side=tk.LEFT, padx=(0, 10))

        # Kh√¥ng c√≥ n√∫t x√≥a m√¥n h·ªçc v√† refresh

        # N√∫t ƒë√≥ng
        ttk.Button(button_frame, text="‚ùå ƒê√≥ng",
                   command=dialog.destroy,
                   width=15).pack(side=tk.RIGHT)

        # Frame t√¨m ki·∫øm
        search_frame = ttk.LabelFrame(main_frame, text="üîç T√¨m ki·∫øm m√¥n h·ªçc")
        search_frame.pack(fill="x", pady=(0, 15))

        # T√¨m ki·∫øm theo t√™n (real-time)
        ttk.Label(search_frame, text="üîç T√¨m ki·∫øm (g√µ ƒë·ªÉ t√¨m real-time):").pack(side=tk.LEFT, padx=(10, 5))
        search_var = tk.StringVar()
        search_entry = ttk.Entry(search_frame, textvariable=search_var, width=40)
        search_entry.pack(side=tk.LEFT, padx=(0, 10))

        # Th√™m placeholder text b·∫±ng c√°ch s·ª≠ d·ª•ng bind
        def on_focus_in(event):
            if search_var.get() == "Nh·∫≠p t√™n, m√£ ho·∫∑c m√¥ t·∫£ m√¥n h·ªçc...":
                search_var.set("")
                search_entry.config(foreground="black")

        def on_focus_out(event):
            if search_var.get() == "":
                search_var.set("Nh·∫≠p t√™n, m√£ ho·∫∑c m√¥ t·∫£ m√¥n h·ªçc...")
                search_entry.config(foreground="gray")

        # Thi·∫øt l·∫≠p placeholder ban ƒë·∫ßu
        search_var.set("Nh·∫≠p t√™n, m√£ ho·∫∑c m√¥ t·∫£ m√¥n h·ªçc...")
        search_entry.config(foreground="gray")

        # Bind events cho placeholder
        search_entry.bind('<FocusIn>', on_focus_in)
        search_entry.bind('<FocusOut>', on_focus_out)

        # Bind key release ƒë·ªÉ t√¨m ki·∫øm real-time
        search_var.trace('w', lambda *args: self.search_subjects_realtime(dialog, search_var.get()))

        # Bind Enter key ƒë·ªÉ x√≥a t√¨m ki·∫øm
        search_entry.bind('<Return>', lambda e: self.clear_search(dialog))
        search_entry.bind('<Escape>', lambda e: self.clear_search(dialog))

        # Hint cho ng∆∞·ªùi d√πng
        hint_label = ttk.Label(search_frame, text="üí° Enter/Escape: X√≥a t√¨m ki·∫øm",
                               font=("Arial", 8), foreground="gray")
        hint_label.pack(side=tk.LEFT, padx=(10, 0))

        # Th√™m separator
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill='x', pady=10)

        # Frame hi·ªÉn th·ªã danh s√°ch m√¥n h·ªçc hi·ªán t·∫°i
        list_frame = ttk.LabelFrame(main_frame, text="Danh s√°ch m√¥n h·ªçc hi·ªán t·∫°i")
        list_frame.pack(fill="both", expand=True)

        # Treeview cho danh s√°ch m√¥n h·ªçc v·ªõi k√≠ch th∆∞·ªõc l·ªõn h∆°n
        columns = ("ID", "T√™n m√¥n h·ªçc", "M√£ m√¥n h·ªçc", "M√¥ t·∫£", "S·ªë c√¢u h·ªèi", "Ng√†y t·∫°o")
        self.subjects_tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=20)

        # C·∫•u h√¨nh c·ªôt v·ªõi k√≠ch th∆∞·ªõc ph√π h·ª£p
        column_widths = {
            "ID": 60,
            "T√™n m√¥n h·ªçc": 200,
            "M√£ m√¥n h·ªçc": 120,
            "M√¥ t·∫£": 250,
            "S·ªë c√¢u h·ªèi": 100,
            "Ng√†y t·∫°o": 150
        }

        for col in columns:
            self.subjects_tree.heading(col, text=col)
            self.subjects_tree.column(col, width=column_widths[col], minwidth=50)

        self.subjects_tree.pack(fill="both", expand=True, padx=10, pady=10)

        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.subjects_tree.yview)
        scrollbar.pack(side=tk.RIGHT, fill="y")
        self.subjects_tree.configure(yscrollcommand=scrollbar.set)

        # Bind double-click ƒë·ªÉ ch·ªânh s·ª≠a m√¥n h·ªçc
        self.subjects_tree.bind("<Double-1>", lambda e: self.edit_subject_from_dialog(dialog))

        # Load danh s√°ch m√¥n h·ªçc
        self.load_subjects_for_dialog()

        # Focus v√†o √¥ t√¨m ki·∫øm
        search_entry.focus()

        # L∆∞u tr·ªØ danh s√°ch g·ªëc ƒë·ªÉ t√¨m ki·∫øm
        self.all_subjects = []

    def search_subjects(self, dialog, search_term):
        """T√¨m ki·∫øm m√¥n h·ªçc theo t√™n (kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng)"""
        if not search_term.strip():
            self.load_subjects_for_dialog()
            return

        try:
            # Chu·∫©n h√≥a t·ª´ kh√≥a t√¨m ki·∫øm
            search_term_normalized = search_term.strip().lower()

            # L·ªçc danh s√°ch m√¥n h·ªçc theo t·ª´ kh√≥a
            filtered_subjects = []
            for subject in self.all_subjects:
                # Chu·∫©n h√≥a t√™n m√¥n h·ªçc ƒë·ªÉ so s√°nh
                subject_name_normalized = subject['name'].lower()
                subject_code_normalized = subject.get('code', '').lower()
                subject_desc_normalized = subject.get('description', '').lower()

                # T√¨m ki·∫øm trong t√™n, m√£ v√† m√¥ t·∫£ m√¥n h·ªçc
                if (search_term_normalized in subject_name_normalized or
                        search_term_normalized in subject_code_normalized or
                        search_term_normalized in subject_desc_normalized):
                    filtered_subjects.append(subject)

            # C·∫≠p nh·∫≠t treeview v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
            self._update_subjects_tree(filtered_subjects)

            if filtered_subjects:
                messagebox.showinfo("K·∫øt qu·∫£ t√¨m ki·∫øm",
                                    f"T√¨m th·∫•y {len(filtered_subjects)} m√¥n h·ªçc!\n"
                                    f"T·ª´ kh√≥a: '{search_term}'")
            else:
                messagebox.showinfo("K·∫øt qu·∫£ t√¨m ki·∫øm",
                                    f"Kh√¥ng t√¨m th·∫•y m√¥n h·ªçc n√†o!\n"
                                    f"T·ª´ kh√≥a: '{search_term}'")

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t√¨m ki·∫øm: {str(e)}")

    def search_subjects_realtime(self, dialog, search_term):
        """T√¨m ki·∫øm real-time khi g√µ (kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o)"""
        # Ki·ªÉm tra n·∫øu ƒëang hi·ªÉn th·ªã placeholder th√¨ kh√¥ng t√¨m ki·∫øm
        if (not search_term.strip() or
                search_term == "Nh·∫≠p t√™n, m√£ ho·∫∑c m√¥ t·∫£ m√¥n h·ªçc..."):
            self.load_subjects_for_dialog()
            return

        try:
            # Chu·∫©n h√≥a t·ª´ kh√≥a t√¨m ki·∫øm
            search_term_normalized = search_term.strip().lower()

            # L·ªçc danh s√°ch m√¥n h·ªçc theo t·ª´ kh√≥a
            filtered_subjects = []
            for subject in self.all_subjects:
                # Chu·∫©n h√≥a t√™n m√¥n h·ªçc ƒë·ªÉ so s√°nh
                subject_name_normalized = subject['name'].lower()
                subject_code_normalized = subject.get('code', '').lower()
                subject_desc_normalized = subject.get('description', '').lower()

                # T√¨m ki·∫øm trong t√™n, m√£ v√† m√¥ t·∫£ m√¥n h·ªçc
                if (search_term_normalized in subject_name_normalized or
                        search_term_normalized in subject_code_normalized or
                        search_term_normalized in subject_desc_normalized):
                    filtered_subjects.append(subject)

            # C·∫≠p nh·∫≠t treeview v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm (kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o)
            self._update_subjects_tree(filtered_subjects)

        except Exception as e:
            # Kh√¥ng hi·ªÉn th·ªã l·ªói cho real-time search
            pass

    def clear_search(self, dialog):
        """X√≥a t√¨m ki·∫øm v√† hi·ªÉn th·ªã l·∫°i t·∫•t c·∫£ m√¥n h·ªçc"""
        # T√¨m search_entry trong dialog
        for widget in dialog.winfo_children():
            if isinstance(widget, ttk.Frame):
                for child in widget.winfo_children():
                    if isinstance(child, ttk.Frame):
                        for grandchild in child.winfo_children():
                            if isinstance(grandchild, ttk.Entry):
                                # Reset placeholder
                                grandchild.delete(0, tk.END)
                                grandchild.insert(0, "Nh·∫≠p t√™n, m√£ ho·∫∑c m√¥ t·∫£ m√¥n h·ªçc...")
                                grandchild.config(foreground="gray")
                                break

        self.load_subjects_for_dialog()

    def edit_subject_from_dialog(self, dialog):
        """Ch·ªânh s·ª≠a m√¥n h·ªçc t·ª´ dialog"""
        selection = self.subjects_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ ch·ªânh s·ª≠a!")
            return

        subject_id = self.subjects_tree.item(selection[0], "values")[0]
        subject_name = self.subjects_tree.item(selection[0], "values")[1]

        # M·ªü dialog ch·ªânh s·ª≠a m√¥n h·ªçc
        self._open_edit_subject_dialog(dialog, subject_id, subject_name)

    def _open_edit_subject_dialog(self, parent_dialog, subject_id, subject_name):
        """M·ªü dialog ch·ªânh s·ª≠a m√¥n h·ªçc"""
        try:
            from services import subject_service
            subject = subject_service.get_subject(subject_id)
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√¥n h·ªçc: {str(e)}")
            return

        edit_dialog = tk.Toplevel(parent_dialog)
        edit_dialog.title(f"Ch·ªânh s·ª≠a m√¥n h·ªçc - {subject_name}")
        edit_dialog.geometry("500x400")
        edit_dialog.transient(parent_dialog)
        edit_dialog.grab_set()

        # CƒÉn gi·ªØa dialog
        edit_dialog.update_idletasks()
        x = (edit_dialog.winfo_screenwidth() // 2) - (500 // 2)
        y = (edit_dialog.winfo_screenheight() // 2) - (400 // 2)
        edit_dialog.geometry(f"500x400+{x}+{y}")

        frame = ttk.Frame(edit_dialog, padding="20")
        frame.pack(fill="both", expand=True)

        # Form fields
        ttk.Label(frame, text="T√™n m√¥n h·ªçc:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky="w", pady=8,
                                                                               padx=(0, 10))
        name_var = tk.StringVar(value=subject['name'])
        ttk.Entry(frame, textvariable=name_var, width=35, font=("Arial", 10)).grid(row=0, column=1, sticky="ew", pady=8)

        ttk.Label(frame, text="M√£ m√¥n h·ªçc:", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky="w", pady=8,
                                                                              padx=(0, 10))
        code_var = tk.StringVar(value=subject.get('code', ''))
        ttk.Entry(frame, textvariable=code_var, width=35, font=("Arial", 10)).grid(row=1, column=1, sticky="ew", pady=8)

        ttk.Label(frame, text="M√¥ t·∫£:", font=("Arial", 10, "bold")).grid(row=2, column=0, sticky="w", pady=8,
                                                                         padx=(0, 10))
        desc_var = tk.StringVar(value=subject.get('description', ''))
        ttk.Entry(frame, textvariable=desc_var, width=35, font=("Arial", 10)).grid(row=2, column=1, sticky="ew", pady=8)

        def save_edit():
            try:
                subject_service.update_subject(subject_id, {
                    "name": name_var.get().strip(),
                    "code": code_var.get().strip(),
                    "description": desc_var.get().strip()
                })
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t m√¥n h·ªçc th√†nh c√¥ng!")
                edit_dialog.destroy()
                self.load_subjects_for_dialog()
                self._load_subjects_silently()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√¥n h·ªçc: {str(e)}")

        def cancel_edit():
            edit_dialog.destroy()

        # Button frame
        button_frame = ttk.Frame(frame)
        button_frame.grid(row=3, column=0, columnspan=2, pady=(20, 0))

        ttk.Button(button_frame, text="‚ùå H·ªßy", command=cancel_edit, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚úÖ L∆∞u thay ƒë·ªïi", command=save_edit, width=18).pack(side=tk.RIGHT)

        # C·∫•u h√¨nh grid
        frame.columnconfigure(1, weight=1)

    def create_subject(self, dialog):
        """T·∫°o m√¥n h·ªçc m·ªõi"""
        from gui.admin_window import SubjectManagementWindow
        SubjectManagementWindow(self)
        dialog.destroy()

    def delete_subject_from_dialog(self, dialog):
        """X√≥a m√¥n h·ªçc t·ª´ dialog"""
        selection = self.subjects_tree.selection()
        if not selection:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√¥n h·ªçc ƒë·ªÉ x√≥a!")
            return

        subject_id = self.subjects_tree.item(selection[0], "values")[0]
        subject_name = self.subjects_tree.item(selection[0], "values")[1]

        result = messagebox.askyesno("X√°c nh·∫≠n",
                                     f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a m√¥n h·ªçc {subject_name}?\n\n"
                                     f"‚ö†Ô∏è C·∫£nh b√°o: Vi·ªác x√≥a m√¥n h·ªçc s·∫Ω x√≥a t·∫•t c·∫£ c√¢u h·ªèi v√† ƒë·ªÅ thi li√™n quan!")

        if result:
            try:
                from services import subject_service
                from services.api_client import clear_cache

                # X√≥a m√¥n h·ªçc
                subject_service.delete_subject(subject_id)

                # X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi
                clear_cache()

                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a m√¥n h·ªçc {subject_name}!")

                # C·∫≠p nh·∫≠t l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu
                self.load_subjects_for_dialog()  # C·∫≠p nh·∫≠t dialog
                self._load_subjects_silently()  # C·∫≠p nh·∫≠t main window
                self.load_exams()  # C·∫≠p nh·∫≠t danh s√°ch ƒë·ªÅ thi

                # ƒê·∫£m b·∫£o treeview ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                self.subjects_tree.update()

            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a m√¥n h·ªçc: {str(e)}")

    def refresh_subjects(self, dialog):
        """L√†m m·ªõi danh s√°ch m√¥n h·ªçc"""
        try:
            from services.api_client import clear_cache

            # X√≥a cache ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu m·ªõi
            clear_cache()

            # C·∫≠p nh·∫≠t l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu
            self.load_subjects_for_dialog()  # C·∫≠p nh·∫≠t dialog
            self._load_subjects_silently()  # C·∫≠p nh·∫≠t main window

            # ƒê·∫£m b·∫£o treeview ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            self.subjects_tree.update()

            # Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o l√†m m·ªõi
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l√†m m·ªõi danh s√°ch m√¥n h·ªçc: {str(e)}")

    def _load_subjects_silently(self):
        """T·∫£i danh s√°ch m√¥n h·ªçc m√† kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o"""
        try:
            from services.api_client import clear_cache
            from services import subject_service

            # X√≥a cache tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
            clear_cache()

            subjects = subject_service.get_subjects()

            subject_dict = {}
            subject_names = []

            for subject in subjects:
                subject_dict[subject['name']] = subject['id']
                subject_names.append(subject['name'])

            self.subject_combo['values'] = subject_names
            self.subject_dict = subject_dict

            if subject_names:
                self.subject_combo.set(subject_names[0])

        except Exception as e:
            # Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho silent loading
            pass

    def load_subjects_for_dialog(self):
        """T·∫£i danh s√°ch m√¥n h·ªçc cho dialog"""
        try:
            from services.api_client import clear_cache
            from services import subject_service

            # X√≥a cache tr∆∞·ªõc khi t·∫£i d·ªØ li·ªáu m·ªõi
            clear_cache()

            subjects = subject_service.get_subjects()

            # L∆∞u tr·ªØ danh s√°ch g·ªëc ƒë·ªÉ t√¨m ki·∫øm
            self.all_subjects = subjects

            # C·∫≠p nh·∫≠t treeview
            self._update_subjects_tree(subjects)

        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc: {str(e)}")

    def _update_subjects_tree(self, subjects):
        """C·∫≠p nh·∫≠t treeview v·ªõi danh s√°ch m√¥n h·ªçc"""
        # X√≥a d·ªØ li·ªáu c≈©
        for item in self.subjects_tree.get_children():
            self.subjects_tree.delete(item)

        # Th√™m d·ªØ li·ªáu m·ªõi
        for subject in subjects:
            created_at = subject.get('created_at')
            if created_at:
                created_at = datetime.datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                created_at = created_at.strftime('%d/%m/%Y %H:%M')
            else:
                created_at = "N/A"

            self.subjects_tree.insert("", "end", values=(
                subject['id'],
                subject['name'],
                subject.get('code', 'N/A'),
                subject.get('description', 'N/A'),
                subject.get('question_count', 0),
                created_at
            ))