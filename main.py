import tkinter as tk
from tkinter import ttk, messagebox
import logging
from gui.login_window import LoginWindow
from gui.styles import ModernStyles
import bcrypt
from services.api_client import clear_cache

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ExamBankApp:
    def __init__(self):
        self.root = tk.Tk()
        self.current_user = None
        self.setup_main_window()
        self.show_welcome_screen()

    def setup_main_window(self):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï ch√≠nh"""
        self.root.title("üéì H·ªá th·ªëng Qu·∫£n l√Ω Ng√¢n h√†ng ƒê·ªÅ thi Tr·∫Øc nghi·ªám")
        self.root.geometry("1000x700")  # TƒÉng k√≠ch th∆∞·ªõc m·∫∑c ƒë·ªãnh
        self.root.resizable(True, True)  # Cho ph√©p resize c·∫£ chi·ªÅu r·ªông v√† chi·ªÅu cao
        self.root.minsize(800, 600)  # K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu

        # Apply modern styling
        ModernStyles.apply_modern_style()
        self.root.configure(bg=ModernStyles.COLORS['light'])

        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_window()

    def center_window(self):
        """CƒÉn gi·ªØa c·ª≠a s·ªï tr√™n m√†n h√¨nh"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f'{width}x{height}+{x}+{y}')

    def show_welcome_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh ch√†o m·ª´ng"""
        # Main container
        main_frame = ModernStyles.create_modern_frame(self.root)
        main_frame.pack(fill="both", expand=True, padx=60, pady=60)

        # Header section
        header_frame = ModernStyles.create_modern_frame(main_frame)
        header_frame.pack(fill="x", pady=(0, 50))

        # Main title
        title_label = ModernStyles.create_title_label(header_frame,
                                                      "üéì H·ªÜ TH·ªêNG QU·∫¢N L√ù\nüìö NG√ÇN H√ÄNG ƒê·ªÄ THI TR·∫ÆC NGHI·ªÜM")
        title_label.pack()

        # Subtitle
        subtitle_label = ModernStyles.create_subtitle_label(header_frame,
                                                            "Gi·∫£i ph√°p to√†n di·ªán cho vi·ªác qu·∫£n l√Ω v√† t·ªï ch·ª©c thi tr·∫Øc nghi·ªám")
        subtitle_label.pack(pady=(10, 0))

        # Content section with 2 columns
        content_frame = ModernStyles.create_modern_frame(main_frame)
        content_frame.pack(fill="both", expand=True, pady=(30, 0))

        # Left column - Features description
        left_frame = ModernStyles.create_modern_frame(content_frame)
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 30))

        # Features title
        desc_title = ModernStyles.create_subtitle_label(left_frame, "üöÄ T√≠nh nƒÉng ch√≠nh")
        desc_title.pack(anchor="w", pady=(0, 20))

        # System features with icons
        features = [
            ("üë®‚Äçüíº Admin", "Qu·∫£n l√Ω ng∆∞·ªùi d√πng, ƒë·ªÅ thi, to√†n b·ªô h·ªá th·ªëng"),
            ("üìù Question Creator", "Upload file .docx ch·ª©a c√¢u h·ªèi"),
            ("üìä Exam Generator", "T·∫°o ƒë·ªÅ thi t·ª´ ng√¢n h√†ng c√¢u h·ªèi"),
            ("üë®‚Äçüéì Student", "L√†m b√†i thi tr·ª±c tuy·∫øn"),
            ("üìà Analytics", "Th·ªëng k√™ v√† b√°o c√°o chi ti·∫øt"),
            ("üîí Security", "B·∫£o m·∫≠t th√¥ng tin v√† ph√¢n quy·ªÅn")
        ]

        for icon_text, description in features:
            feature_frame = ModernStyles.create_modern_frame(left_frame)
            feature_frame.pack(fill="x", pady=8)

            icon_label = tk.Label(feature_frame, text=icon_text,
                                  font=("Segoe UI", 12, "bold"),
                                  fg=ModernStyles.COLORS['primary'],
                                  bg=ModernStyles.COLORS['light'])
            icon_label.pack(anchor="w")

            desc_label = ModernStyles.create_info_label(feature_frame, f"   {description}")
            desc_label.pack(anchor="w")

        # Right column - Login information
        right_frame = ModernStyles.create_modern_frame(content_frame)
        right_frame.pack(side="right", fill="both", expand=True)

        # Sample accounts frame
        info_frame = ModernStyles.create_modern_frame(right_frame)
        info_frame.pack(fill="x", pady=(0, 25))

        info_title = ModernStyles.create_subtitle_label(info_frame, "üîë T√†i kho·∫£n m·∫´u")
        info_title.pack(anchor="w", pady=(0, 15))

        password_info = ModernStyles.create_info_label(info_frame, "M·∫≠t kh·∫©u: 123456")
        password_info.pack(anchor="w", pady=(0, 15))

        accounts = [
            ("üë®‚Äçüíº admin", "Qu·∫£n tr·ªã vi√™n (Admin)"),
            ("üìù creator1", "Ng∆∞·ªùi l√†m ƒë·ªÅ (Question Creator)"),
            ("üìä generator1", "Ng∆∞·ªùi sinh ƒë·ªÅ (Exam Generator)"),
            ("üë®‚Äçüéì student1", "H·ªçc sinh (Student)")
        ]

        for username, role in accounts:
            account_frame = ModernStyles.create_modern_frame(info_frame)
            account_frame.pack(fill="x", pady=5)

            user_label = tk.Label(account_frame, text=username,
                                  font=("Segoe UI", 11, "bold"),
                                  fg=ModernStyles.COLORS['dark'],
                                  bg=ModernStyles.COLORS['light'])
            user_label.pack(anchor="w")

            role_label = ModernStyles.create_info_label(account_frame, f"   {role}")
            role_label.pack(anchor="w")

        # Login button frame
        button_frame = ModernStyles.create_modern_frame(right_frame)
        button_frame.pack(fill="x")

        # Login button with modern styling
        login_button = ModernStyles.create_success_button(button_frame,
                                                          "üîê ƒêƒÇNG NH·∫¨P",
                                                          self.show_login)
        login_button.pack(pady=(0, 20))

        # Version information
        version_frame = ModernStyles.create_modern_frame(button_frame)
        version_frame.pack()

        version_label = ModernStyles.create_info_label(version_frame, "üìã Phi√™n b·∫£n 2.0")
        version_label.pack(side="left", padx=(0, 15))

        copyright_label = ModernStyles.create_info_label(version_frame, "¬© 2024 ExamBank System")
        copyright_label.pack(side="left")

    def show_login(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï ƒëƒÉng nh·∫≠p"""
        LoginWindow(self)

    def show_main_window_after_login(self):
        from gui.student_window import StudentWindow
        from gui.question_creator_window import QuestionCreatorWindow
        from gui.exam_generator_window import ExamGeneratorWindow
        from gui.admin_window import AdminWindow

        role = self.current_user['role']

        # ·∫®n c·ª≠a s·ªï ch√≠nh (welcome screen)
        self.root.withdraw()

        # Debug: In ra role ƒë·ªÉ ki·ªÉm tra
        print(f"User role: {role}")
        print(f"User data: {self.current_user}")

        # M·ªü c·ª≠a s·ªï t∆∞∆°ng ·ª©ng v·ªõi role
        if role == "admin":
            # Admin c√≥ quy·ªÅn qu·∫£n l√Ω to√†n b·ªô h·ªá th·ªëng
            AdminWindow(self, None)
        elif role == "student":
            # Student ch·ªâ c√≥ th·ªÉ l√†m b√†i thi
            StudentWindow(self, None)
        elif role == "question_creator":
            # Question Creator ch·ªâ c√≥ th·ªÉ upload c√¢u h·ªèi
            QuestionCreatorWindow(self, None)
        elif role == "exam_generator":
            # Exam Generator ch·ªâ c√≥ th·ªÉ t·∫°o ƒë·ªÅ thi
            ExamGeneratorWindow(self, None)
        else:
            messagebox.showerror("L·ªói", f"Role kh√¥ng h·ª£p l·ªá: {role}")

    def show_login_after_logout(self):
        """Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ƒëƒÉng nh·∫≠p sau khi ƒëƒÉng xu·∫•t"""
        self.current_user = None
        self.root.deiconify()  # Hi·ªÉn th·ªã l·∫°i c·ª≠a s·ªï ch√≠nh
        self.show_welcome_screen()  # Hi·ªÉn th·ªã l·∫°i welcome screen

    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            logging.info("·ª®ng d·ª•ng ƒë∆∞·ª£c t·∫Øt b·ªüi ng∆∞·ªùi d√πng")
        except Exception as e:
            logging.error(f"L·ªói ch·∫°y ·ª©ng d·ª•ng: {e}")
            messagebox.showerror("L·ªói", f"L·ªói ch·∫°y ·ª©ng d·ª•ng: {str(e)}")

    def verify_password(self, password, hashed):
        if isinstance(hashed, str):
            hashed = hashed.encode('utf-8')
        return bcrypt.checkpw(password.encode('utf-8'), hashed)

def main():
    """H√†m main"""
    try:
        app = ExamBankApp()
        app.run()
    except Exception as e:
        logging.error(f"L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng: {e}")
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {str(e)}")

if __name__ == "__main__":
    main() 